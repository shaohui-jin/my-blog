import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-DM2oBLF-.js";const p={},e=t(`<p><strong>类（Class）</strong> 是 <strong>面向对象</strong> 程序设计 <strong>（OOP，Object-Oriented Programming）</strong> 实现信息封装的基础</p><p>类是一种用户定义的 <strong>引用数据</strong> 类型，也称类类型</p><p>传统的 面向对象语言 基本都是基于类的，JavaScript 基于 <strong>原型</strong> 的方式让开发者多了很多理解成本</p><p>在 ES6 之后，JavaScript 拥有了 <strong>class</strong> 关键字，虽然本质依然是 <strong>构造函数</strong>，但是使用起来已经方便了许多</p><p>但是 JavaScript 的 class 依然有一些特性还没有加入，比如 <strong>修饰符</strong> 和 <strong>抽象类</strong></p><p>TypeScript 的 class 支持 面向对象 的 所有特性，比如 <strong>类</strong>、<strong>接口</strong> 等</p><h2 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h2><p>定义类的关键字为 <strong>class</strong>，后面紧跟类名，类可以包含以下几个模块（类的数据成员）：</p><ul><li>字段：类里面声明的变量</li><li>构造函数：类实例化时调用，可以为类的对象分配内存</li><li>方法：对象要执行的操作</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token comment">// 字段</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token comment">// 构造函数</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>

  <span class="token comment">// 方法</span>
  <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;姓名为:  &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h2><p>类的 <strong>继承</strong> 使用 <strong>extends</strong> 的关键字</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">talk</span><span class="token punctuation">(</span>someThing<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someThing<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The man ran ten meters&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> aMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

aMan<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The man ran ten meters</span>
aMan<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token string">&quot;It&#39;s exhausting&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// It&#39;s exhausting</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Man 是一个 <strong>派生类</strong>，它派生自 Man 基类，<strong>派生类</strong> 通常被称作 <strong>子类</strong>，<strong>基类</strong> 通常被称作 <strong>超类</strong></p><p>Man 类继承了 People 类，因此实例 aMan 也能够使用 People 类 talk 方法</p><p>同样，类继承后，子类可以对父类的方法重新定义，这个过程称之为方法的重写</p><p>通过 <strong>super关键字</strong> 是对父类的直接引用，该关键字可以引用父类的属性和方法，如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">talk</span><span class="token punctuation">(</span>someThing<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someThing<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The man ran ten meters&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token string">&quot;People don&#39;t want to speak anymore&quot;</span><span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Man don&#39;t want to speak anymore&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> aMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

aMan<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The man ran ten meters</span>
aMan<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// People don&#39;t want to speak anymore    Man don&#39;t want to speak anymore</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符"><span>修饰符</span></a></h2><h3 id="公共修饰符-public" tabindex="-1"><a class="header-anchor" href="#公共修饰符-public"><span>公共修饰符 public</span></a></h3><p>可以被访问的类程序里定义的成员</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// zhangsan</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> aMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aMan<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// zhangsan</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="私有修饰符-private" tabindex="-1"><a class="header-anchor" href="#私有修饰符-private"><span>私有修饰符 private</span></a></h3><p>只能够在该类的 <strong>内部</strong> 进行访问</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// zhangsan</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// Property &#39;age&#39; is private and only accessible within class &#39;People&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> aMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aMan<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// zhangsan</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aMan<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// Property &#39;age&#39; is private and only accessible within class &#39;People&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="受保护修饰符-protect" tabindex="-1"><a class="header-anchor" href="#受保护修饰符-protect"><span>受保护修饰符 protect</span></a></h3><p>除了在该类的 <strong>内部</strong> 可以访问，还可以在 <strong>子类</strong> 中仍然可以访问</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
  <span class="token keyword">protected</span> sex<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;female&#39;</span> <span class="token operator">=</span> <span class="token string">&#39;male&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// zhangsan</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// Property &#39;age&#39; is private and only accessible within class &#39;People&#39;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span> <span class="token comment">// male</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> aMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aMan<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// zhangsan</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aMan<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// Property &#39;age&#39; is private and only accessible within class &#39;People&#39;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aMan<span class="token punctuation">.</span>sex<span class="token punctuation">)</span> <span class="token comment">// Property &#39;sex&#39; is protected and only accessible within class &#39;People&#39; and its subclasses.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="只读修饰符-readonly" tabindex="-1"><a class="header-anchor" href="#只读修饰符-readonly"><span>只读修饰符 readonly</span></a></h3><p>通过 <strong>readonly</strong> 关键字进行声明，只读属性必须在 <strong>声明时</strong> 或 构造函数里 被 <strong>初始化</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">)</span>
people<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;lisi&#39;</span> <span class="token comment">//  Cannot assign to &#39;name&#39; because it is a read-only property.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态属性-static" tabindex="-1"><a class="header-anchor" href="#静态属性-static"><span>静态属性 static</span></a></h3><p>这些属性存在于 <strong>类本身</strong> 上面而 不是 <strong>类实例</strong> 上，通过static进行定义，访问这些属性需要通过 <strong>类型.静态属性</strong> 的这种形式访问</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> idCard<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;111xxxxxx11&#39;</span>
  <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>idCard<span class="token punctuation">)</span> <span class="token comment">// Property &#39;idCard&#39; does not exist on type &#39;People&#39;. Did you mean to access the static member &#39;People.idCard&#39; instead?</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>idCard<span class="token punctuation">)</span> <span class="token comment">// 111xxxxxx11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抽象类-abstract" tabindex="-1"><a class="header-anchor" href="#抽象类-abstract"><span>抽象类 abstract</span></a></h3><p>抽象类 做为 其它派生类 的 基类 使用，它们一般不会直接被实例化，不同于接口，抽象类可以包含成员的实现细节</p><p><strong>abstract</strong> 关键字是用于定义 <strong>抽象类</strong> 和在抽象类内部定义 <strong>抽象方法</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token keyword">abstract</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The people ran ten meters&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Man don&#39;t want to speak anymore&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> aMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
aMan<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// The people ran ten meters</span>
aMan<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Man don&#39;t want to speak anymore</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><p>除了日常借助 类 的特性完成日常业务代码，还可以将类（class）也可以作为接口，尤其在 <strong>React</strong> 工程中是很常用的，如下：</p><p><code>export default class Carousel extends React.Component&lt;Props, State&gt; {}</code></p><p>由于组件需要传入 <strong>props</strong> 的类型 <strong>Props</strong> ，同时有需要设置默认 <strong>props</strong> 即 <strong>defaultProps</strong>，这时候更加适合使用 class 作为接口 先声明一个类，这个类包含组件 <strong>props</strong> 所需的 <strong>类型</strong> 和 <strong>初始值</strong>：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// props的类型</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> children<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>React<span class="token punctuation">.</span>ReactElement<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span> <span class="token operator">|</span> React<span class="token punctuation">.</span>ReactElement<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">never</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">public</span> speed<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">500</span>
  <span class="token keyword">public</span> height<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">160</span>
  <span class="token keyword">public</span> animation<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;easeInOutQuad&#39;</span>
  <span class="token keyword">public</span> isAuto<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">public</span> autoPlayInterval<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">4500</span>
  <span class="token keyword">public</span> <span class="token function-variable function">afterChange</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function-variable function">beforeChange</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">public</span> selesctedColor<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">public</span> showDots<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当需要传入 props 类型的时候直接将 Props 作为接口传入，此时 Props 的作用就是接口，而当需要我们设置defaultProps初始值的时候，我们只需要:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>
<span class="token keyword">const</span> defaultProps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Props</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Props 的实例就是 <strong>defaultProps</strong> 的 <strong>初始值</strong>，这就是 <strong>class</strong> 作为 <strong>接口</strong> 的实际应用，</p><p>用一个 class 起到了 <strong>接口</strong> 和 <strong>设置初始值</strong> 两个作用，方便统一管理，减少了代码量</p>`,47),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/TypeScript/Class/","title":"TS中的类","lang":"zh-CN","frontmatter":{"title":"TS中的类","lang":"zh-CN","date":"2024-04-15T14:15:31.000Z","permalink":"/TypeScript/Class/","category":["TypeScript"],"tag":["TypeScript"],"description":"类（Class） 是 面向对象 程序设计 （OOP，Object-Oriented Programming） 实现信息封装的基础 类是一种用户定义的 引用数据 类型，也称类类型 传统的 面向对象语言 基本都是基于类的，JavaScript 基于 原型 的方式让开发者多了很多理解成本 在 ES6 之后，JavaScript 拥有了 class 关键字，虽...","head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/TypeScript/Class/"}],["meta",{"property":"og:title","content":"TS中的类"}],["meta",{"property":"og:description","content":"类（Class） 是 面向对象 程序设计 （OOP，Object-Oriented Programming） 实现信息封装的基础 类是一种用户定义的 引用数据 类型，也称类类型 传统的 面向对象语言 基本都是基于类的，JavaScript 基于 原型 的方式让开发者多了很多理解成本 在 ES6 之后，JavaScript 拥有了 class 关键字，虽..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-05T11:41:53.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:published_time","content":"2024-04-15T14:15:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-05T11:41:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TS中的类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-15T14:15:31.000Z\\",\\"dateModified\\":\\"2024-06-05T11:41:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[{"level":2,"title":"用法","slug":"用法","link":"#用法","children":[]},{"level":2,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":2,"title":"修饰符","slug":"修饰符","link":"#修饰符","children":[{"level":3,"title":"公共修饰符 public","slug":"公共修饰符-public","link":"#公共修饰符-public","children":[]},{"level":3,"title":"私有修饰符 private","slug":"私有修饰符-private","link":"#私有修饰符-private","children":[]},{"level":3,"title":"受保护修饰符 protect","slug":"受保护修饰符-protect","link":"#受保护修饰符-protect","children":[]},{"level":3,"title":"只读修饰符 readonly","slug":"只读修饰符-readonly","link":"#只读修饰符-readonly","children":[]},{"level":3,"title":"静态属性 static","slug":"静态属性-static","link":"#静态属性-static","children":[]},{"level":3,"title":"抽象类 abstract","slug":"抽象类-abstract","link":"#抽象类-abstract","children":[]}]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}],"git":{"createdTime":1717587713000,"updatedTime":1717587713000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":1}]},"readingTime":{"minutes":4.41,"words":1324},"filePathRelative":"zh/TypeScript/TS中的类.md","localizedDate":"2024年4月15日","excerpt":"<p><strong>类（Class）</strong> 是 <strong>面向对象</strong> 程序设计 <strong>（OOP，Object-Oriented Programming）</strong> 实现信息封装的基础</p>\\n<p>类是一种用户定义的 <strong>引用数据</strong> 类型，也称类类型</p>\\n<p>传统的 面向对象语言 基本都是基于类的，JavaScript 基于 <strong>原型</strong> 的方式让开发者多了很多理解成本</p>\\n<p>在 ES6 之后，JavaScript 拥有了 <strong>class</strong> 关键字，虽然本质依然是 <strong>构造函数</strong>，但是使用起来已经方便了许多</p>","autoDesc":true}');export{k as comp,d as data};
