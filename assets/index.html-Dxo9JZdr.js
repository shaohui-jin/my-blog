import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-DJGNjMvf.js";const p={},e=t(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">UseFragmentDownload</span><span class="token punctuation">(</span>
  url <span class="token operator">=</span> <span class="token string">&#39;https://duyi-static.oss-cn-beijing.aliyuncs.com/files/novel.txt&#39;</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token keyword">const</span> reader <span class="token operator">=</span> resp<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> remainChunk <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> resultText <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> done <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> lastIndex <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最后的换行位置</span>
    <span class="token keyword">const</span> chunk <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> lastIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待解析的文本，移除后面一段，保证没有乱码</span>
    <span class="token keyword">const</span> readChunk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>remainChunk<span class="token punctuation">.</span>length <span class="token operator">+</span> chunk<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
    readChunk<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>remainChunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    readChunk<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>chunk<span class="token punctuation">,</span> remainChunk<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    remainChunk <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> text <span class="token operator">=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>readChunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    resultText <span class="token operator">+=</span> text<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","index.html.vue"]]),d=JSON.parse(`{"path":"/Tips/UseFragmentDownload/","title":"大文件分片下载","lang":"zh-CN","frontmatter":{"title":"大文件分片下载","lang":"zh-CN","date":"2025-05-22T17:34:31.000Z","permalink":"/Tips/UseFragmentDownload/","head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/my-blog/Tips/UseFragmentDownload/"}],["meta",{"property":"og:title","content":"大文件分片下载"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-24T08:48:59.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:published_time","content":"2025-05-22T17:34:31.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-24T08:48:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"大文件分片下载\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-22T17:34:31.000Z\\",\\"dateModified\\":\\"2025-05-24T08:48:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1747917796000,"updatedTime":1748076539000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":2}]},"readingTime":{"minutes":0.39,"words":117},"filePathRelative":"zh/代码仓/大文件分片下载.md","localizedDate":"2025年5月22日","excerpt":"<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code>  <span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">UseFragmentDownload</span><span class=\\"token punctuation\\">(</span>\\n  url <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'https://duyi-static.oss-cn-beijing.aliyuncs.com/files/novel.txt'</span>\\n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\n  <span class=\\"token keyword\\">const</span> resp <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> <span class=\\"token function\\">fetch</span><span class=\\"token punctuation\\">(</span>url<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">const</span> reader <span class=\\"token operator\\">=</span> resp<span class=\\"token punctuation\\">.</span>body<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getReader</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">const</span> decoder <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">TextDecoder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">let</span> remainChunk <span class=\\"token operator\\">=</span>  <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Uint8Array</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">let</span> resultText <span class=\\"token operator\\">=</span> <span class=\\"token string\\">''</span>\\n  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span> value<span class=\\"token punctuation\\">,</span> done <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> reader<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">read</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>done<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">const</span> lastIndex <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">lastIndexOf</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 最后的换行位置</span>\\n    <span class=\\"token keyword\\">const</span> chunk <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">slice</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> lastIndex <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 等待解析的文本，移除后面一段，保证没有乱码</span>\\n    <span class=\\"token keyword\\">const</span> readChunk <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Uint8Array</span><span class=\\"token punctuation\\">(</span>remainChunk<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">+</span> chunk<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span>\\n    readChunk<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>remainChunk<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    readChunk<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>chunk<span class=\\"token punctuation\\">,</span> remainChunk<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    remainChunk <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">slice</span><span class=\\"token punctuation\\">(</span>lastIndex <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">const</span> text <span class=\\"token operator\\">=</span> decoder<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">decode</span><span class=\\"token punctuation\\">(</span>readChunk<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    resultText <span class=\\"token operator\\">+=</span> text<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}`);export{r as comp,d as data};
