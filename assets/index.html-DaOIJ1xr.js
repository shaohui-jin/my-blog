import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c,f as a,e as i,a as n,b as s}from"./app-EVybbKqM.js";const l={},u=n("h2",{id:"全文概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#全文概述"},[n("span",null,"全文概述")])],-1),r=s("<p><code>描述</code>： 函数嵌套函数，内部函数被外部函数返回并保存下来，就会产生闭包</p><p><code>特点</code>： 可以重复利用变量，并且这个变量不会污染全局；这个变量一直保存在内存中，不会被垃圾回收机制回收</p><p><code>缺点</code>： 闭包较多的时候，会消耗内存，导致页面性能下降，在IE浏览器中会导致内存泄露</p><p><code>使用</code>： 防抖，节流，函数嵌套函数避免全局污染</p><blockquote><p><strong>高级描述：</strong></p><ol><li><code>函数</code> + <code>其定义时所处的词法环境</code></li><li><code>函数本身</code> + <code>内部属性[Environment]</code></li></ol><p><strong>内存泄漏条件：</strong></p><ol><li><strong>持有了不再需要的函数引用，会导致函数关联的 <code>词法环境</code> 无法销毁，从而导致内存泄露</strong></li><li><strong>当多个函数 <code>共享词法环境</code> 时，会导致词法环境膨胀，从而导致出现 <code>无法触达</code> 也 <code>无法回收</code> 的内存空间，导致内存泄漏</strong></li></ol></blockquote>",5),d=s(`<h2 id="闭包定义应用场景" tabindex="-1"><a class="header-anchor" href="#闭包定义应用场景"><span>闭包定义应用场景</span></a></h2><p>闭包是一种强大的编程工具，它可以用于许多不同的应用场景，包括数据封装、模块化编程、回调函数等。</p><h3 id="保护私有变量" tabindex="-1"><a class="header-anchor" href="#保护私有变量"><span>保护私有变量</span></a></h3><p>闭包允许你创建一个包含 <strong>私有数据</strong> 的函数，这些数据对外部是不可见的。这在模块化编程中非常有用，可以防止外部代码 <strong>直接访问</strong> 和 <strong>修改内部状态</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现数据封装" tabindex="-1"><a class="header-anchor" href="#实现数据封装"><span>实现数据封装</span></a></h3><p>闭包可以用于创建类似于面向对象编程中的对象实例。你可以定义一个包含 <strong>内部状态</strong> 和 <strong>方法</strong> 的函数，然后通过闭包来访问和操作这些数据。这种方式被称为 &quot;<strong>模块模式</strong>&quot;：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getAge</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">setBirthYear</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">year</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> nowYear <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">&lt;=</span> nowYear<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        age <span class="token operator">=</span> nowYear <span class="token operator">-</span> year<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&quot;石怜安&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;石怜安&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 0</span>
person<span class="token punctuation">.</span><span class="token function">setBirthYear</span><span class="token punctuation">(</span><span class="token number">1997</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 27</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现回调函数" tabindex="-1"><a class="header-anchor" href="#实现回调函数"><span>实现回调函数</span></a></h3><p>闭包经常用于创建回调函数，将函数作为参数传递给其他函数。这些回调函数可以 <strong>访问外部函数的局部变量</strong>，以便在异步操作完成后执行特定的逻辑。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 模拟异步请求</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token string">&quot;url:xxxx&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;接收报文为 &quot;</span> <span class="token operator">+</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现函数工厂" tabindex="-1"><a class="header-anchor" href="#实现函数工厂"><span>实现函数工厂</span></a></h3><p>闭包可以用于创建 <strong>定制的函数</strong>，这些函数可以生成特定的行为或配置。这在某些库和框架中很常见。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createPowerFunction</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">**</span> number<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token function">createPowerFunction</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cubic <span class="token operator">=</span> <span class="token function">createPowerFunction</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 25</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cubic</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 125</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内存泄露" tabindex="-1"><a class="header-anchor" href="#内存泄露"><span>内存泄露</span></a></h2><p>垃圾回收器会回收 <strong>无法触达的内存空间</strong>，它是我们 <strong>不想要的内存空间</strong> 的 <strong>子集</strong>。</p>`,16),k=s('<p>首先，打开浏览器的控制台，进入 <strong>存储Memory</strong>，打印一下 <strong>快照 ①</strong>，可以看到并未点击按钮的时候，快照大小为 <strong>27.3M</strong>。</p><p>然后，点击事例的按钮，再去手动触发下 <strong>垃圾回收 ②</strong>，再次打印 <strong>快照 ①</strong>，可以看到快照大小为 <strong>48.1M</strong>。</p><p>最后，点击 <strong>比较Comparison ③</strong>，能清晰看到 <strong>Detached HTMLDivElement</strong> 存在 <strong>10 0000个div</strong> 是 <strong>新增</strong> 的且没有被 <strong>垃圾回收掉</strong>。</p><figure><img src="https://shaohui-jin.github.io/picx-images-hosting/blog/Closure/闭包导致内存泄露案例1-1.syq3ztbbp.webp" alt="" width="800" tabindex="0" loading="lazy"><figcaption>闭包导致内存泄露案例1-1</figcaption></figure><p>接着，把事例代码中的 <strong>increase = null</strong> 注释取消掉，再次点击事例的按钮，第三次打印 <strong>快照</strong>，可以看到快照大小为 <strong>27.1M</strong>。</p><p>再次点击 <strong>比较Comparison</strong>，能清晰看到 <strong>Detached HTMLDivElement</strong> 存在 <strong>10 0000个div</strong> 是 <strong>删除且被垃圾回收</strong>。</p><figure><img src="https://shaohui-jin.github.io/picx-images-hosting/blog/Closure/闭包导致内存泄露案例1-2.3ye82xnq8m.webp" alt="" width="800" tabindex="0" loading="lazy"><figcaption>闭包导致内存泄露案例1-2</figcaption></figure>',7);function g(m,v){const t=e("VuePlayground");return p(),c("div",null,[u,a(" #region info "),r,a(" #endregion info "),d,i(t,{title:"",key:"7adba17b",settings:"%7B%7D",files:"eyJBcHAudnVlIjoiPCEtLSAx44CB5Yib5bu6IGNhbnZhcyDlhYPntKAgLS0%2BXG48dGVtcGxhdGU%2BXG4gIDxidXR0b24gaWQ9XCJjbG9zdXJlX2RlbW9fMVwiPua1i%2BivlTwvYnV0dG9uPlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ%2BXG5leHBvcnQgZGVmYXVsdCB7XG4gIG1vdW50ZWQoKSB7XG4gICAgbGV0IGluY3JlYXNlO1xuICAgIGNvbnN0IGJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjbG9zdXJlX2RlbW9fMScpXG4gICAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBpbmNyZWFzZSA9IHRoaXMuY3JlYXRlSW5jcmVhc2UoKVxuICAgICAgaW5jcmVhc2UoKVxuICAgICAgLy8gaW5jcmVhc2UgPSBudWxsXG4gICAgICAvLyBidG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVDbGljaylcbiAgICB9XG4gICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2xpY2spXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBjcmVhdGVJbmNyZWFzZSgpIHtcbiAgICAgIGNvbnN0IGRvbUxpc3QgPSBuZXcgQXJyYXkoMTAwMDAwKS5maWxsKDApLm1hcCgoXyxpKSA9PiB7XG4gICAgICAgIGNvbnN0IGRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgIGRvbS5pbm5lckhUTUwgPSBpXG4gICAgICAgIHJldHVybiBkb21cbiAgICAgIH0pXG4gICAgICBmdW5jdGlvbiBpbmNyZWFzZSgpIHtcbiAgICAgICAgZG9tTGlzdC5mb3JFYWNoKChkb20pID0%2BIHtcbiAgICAgICAgICBkb20uaW5uZXJIVE1MID0gTnVtYmVyKGRvbS5pbm5lckhUTUwpICsgMVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gX3RlbXAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGRvbXMpXG4gICAgICB9XG4gICAgICByZXR1cm4gaW5jcmVhc2VcbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuIn0%3D"}),k])}const f=o(l,[["render",g],["__file","index.html.vue"]]),I=JSON.parse('{"path":"/Promotion/JavaScript/Closure/","title":"闭包以及内存泄漏原因","lang":"zh-CN","frontmatter":{"title":"闭包以及内存泄漏原因","lang":"zh-CN","date":"2024-03-11T14:58:43.000Z","permalink":"/Promotion/JavaScript/Closure/","category":["JavaScript"],"tag":["JavaScript"],"description":"全文概述 描述： 函数嵌套函数，内部函数被外部函数返回并保存下来，就会产生闭包 特点： 可以重复利用变量，并且这个变量不会污染全局；这个变量一直保存在内存中，不会被垃圾回收机制回收 缺点： 闭包较多的时候，会消耗内存，导致页面性能下降，在IE浏览器中会导致内存泄露 使用： 防抖，节流，函数嵌套函数避免全局污染 高级描述： 函数 + 其定义时所处的词法环...","head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/my-blog/Promotion/JavaScript/Closure/"}],["meta",{"property":"og:title","content":"闭包以及内存泄漏原因"}],["meta",{"property":"og:description","content":"全文概述 描述： 函数嵌套函数，内部函数被外部函数返回并保存下来，就会产生闭包 特点： 可以重复利用变量，并且这个变量不会污染全局；这个变量一直保存在内存中，不会被垃圾回收机制回收 缺点： 闭包较多的时候，会消耗内存，导致页面性能下降，在IE浏览器中会导致内存泄露 使用： 防抖，节流，函数嵌套函数避免全局污染 高级描述： 函数 + 其定义时所处的词法环..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://shaohui-jin.github.io/picx-images-hosting/blog/Closure/闭包导致内存泄露案例1-1.syq3ztbbp.webp \\"闭包导致内存泄露案例1-1\\" =800x"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-17T09:45:20.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2024-03-11T14:58:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-17T09:45:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"闭包以及内存泄漏原因\\",\\"image\\":[\\"https://shaohui-jin.github.io/picx-images-hosting/blog/Closure/闭包导致内存泄露案例1-1.syq3ztbbp.webp \\\\\\"闭包导致内存泄露案例1-1\\\\\\" =800x\\",\\"https://shaohui-jin.github.io/picx-images-hosting/blog/Closure/闭包导致内存泄露案例1-2.3ye82xnq8m.webp \\\\\\"闭包导致内存泄露案例1-2\\\\\\" =800x\\"],\\"datePublished\\":\\"2024-03-11T14:58:43.000Z\\",\\"dateModified\\":\\"2025-04-17T09:45:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[{"level":2,"title":"全文概述","slug":"全文概述","link":"#全文概述","children":[]},{"level":2,"title":"闭包定义应用场景","slug":"闭包定义应用场景","link":"#闭包定义应用场景","children":[{"level":3,"title":"保护私有变量","slug":"保护私有变量","link":"#保护私有变量","children":[]},{"level":3,"title":"实现数据封装","slug":"实现数据封装","link":"#实现数据封装","children":[]},{"level":3,"title":"实现回调函数","slug":"实现回调函数","link":"#实现回调函数","children":[]},{"level":3,"title":"实现函数工厂","slug":"实现函数工厂","link":"#实现函数工厂","children":[]}]},{"level":2,"title":"内存泄露","slug":"内存泄露","link":"#内存泄露","children":[]}],"git":{"createdTime":1744883120000,"updatedTime":1744883120000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":1}]},"readingTime":{"minutes":3.63,"words":1088},"filePathRelative":"zh/精选文章/JavaScript/闭包以及内存泄漏原因.md","localizedDate":"2024年3月11日","excerpt":"<h2>全文概述</h2>\\n<!-- #region info -->\\n<p><code>描述</code>： 函数嵌套函数，内部函数被外部函数返回并保存下来，就会产生闭包</p>\\n<p><code>特点</code>： 可以重复利用变量，并且这个变量不会污染全局；这个变量一直保存在内存中，不会被垃圾回收机制回收</p>\\n<p><code>缺点</code>： 闭包较多的时候，会消耗内存，导致页面性能下降，在IE浏览器中会导致内存泄露</p>\\n<p><code>使用</code>： 防抖，节流，函数嵌套函数避免全局污染</p>\\n<blockquote>\\n<p><strong>高级描述：</strong></p>\\n<ol>\\n<li><code>函数</code> + <code>其定义时所处的词法环境</code></li>\\n<li><code>函数本身</code> + <code>内部属性[Environment]</code></li>\\n</ol>\\n<p><strong>内存泄漏条件：</strong></p>\\n<ol>\\n<li><strong>持有了不再需要的函数引用，会导致函数关联的 <code>词法环境</code> 无法销毁，从而导致内存泄露</strong></li>\\n<li><strong>当多个函数 <code>共享词法环境</code> 时，会导致词法环境膨胀，从而导致出现 <code>无法触达</code> 也 <code>无法回收</code> 的内存空间，导致内存泄漏</strong></li>\\n</ol>\\n</blockquote>","autoDesc":true}');export{f as comp,I as data};
