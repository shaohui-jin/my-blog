import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as t,b as o,a as n,f as a}from"./app-DM2oBLF-.js";const p={},c=o(`<h3 id="解构" tabindex="-1"><a class="header-anchor" href="#解构"><span>解构</span></a></h3><blockquote><p>{...xxx} 只能实现第一层，当有多层的时候还是浅拷贝</p></blockquote><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json"><span>JSON</span></a></h3><blockquote><p>JSON.parse(JSON.stringify(xxx)) 该方法不会拷贝内部函数</p></blockquote><h3 id="递归" tabindex="-1"><a class="header-anchor" href="#递归"><span>递归</span></a></h3><blockquote><p>利用递归实现函数</p></blockquote><h3 id="structuredclone" tabindex="-1"><a class="header-anchor" href="#structuredclone"><span>structuredClone</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span>  <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span>  <span class="token punctuation">}</span>
a<span class="token punctuation">.</span>c <span class="token operator">=</span> a
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">structuredClone</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> a
a<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// {a: 2, b: 2, c: {a: 2, b: 2, c: {…}} }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// {a: 1, b: 2, c: {a: 1, b: 2, c: {…}} }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// {a: 2, b: 2, c: {a: 2, b: 2, c: {…}} }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="messagechannel" tabindex="-1"><a class="header-anchor" href="#messagechannel"><span>MessageChannel</span></a></h3><blockquote><p><code>MessageChannel</code>: Channel Messaging API 的 MessageChannel 接口允许创建一个新的消息通道，并通过它的两个 <code>MessagePort</code> 属性发送数据。</p></blockquote>`,10),l=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js","data-title":"js"},[n("pre",{js:"",class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token function"},"deepClone"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"obj"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token class-name"},"Promise"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"resolve"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" port1"),n("span",{class:"token punctuation"},","),a(" port2 "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token class-name"},"MessageChannel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`
    port1`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"postMessage"),n("span",{class:"token punctuation"},"("),a("obj"),n("span",{class:"token punctuation"},")"),a(`
    port2`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"onmessage"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token parameter"},"msg"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),a(`
      `),n("span",{class:"token function"},"resolve"),n("span",{class:"token punctuation"},"("),a("msg"),n("span",{class:"token punctuation"},"."),a("data"),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token keyword"},"let"),a(" a "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token literal-property property"},"a"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token literal-property property"},"b"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token number"},"2"),a(),n("span",{class:"token punctuation"},"}"),a(`
a`),n("span",{class:"token punctuation"},"."),a("c "),n("span",{class:"token operator"},"="),a(` a
`),n("span",{class:"token keyword"},"const"),a(" b "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"await"),a(),n("span",{class:"token function"},"deepClone"),n("span",{class:"token punctuation"},"("),a("a"),n("span",{class:"token punctuation"},")"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("a"),n("span",{class:"token punctuation"},","),a(" b"),n("span",{class:"token punctuation"},","),a(" a "),n("span",{class:"token operator"},"==="),a(" b"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// <ref *1> { a: 1, b: 2, c: [Circular *1] } <ref *1> { a: 1, b: 2, c: [Circular *1] } false"),a(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),i=[c,l];function r(u,k){return e(),t("div",null,i)}const m=s(p,[["render",r],["__file","index.html.vue"]]),b=JSON.parse('{"path":"/Tips/JavaScript/Data/001/","title":"深克隆","lang":"zh-CN","frontmatter":{"title":"深克隆","lang":"zh-CN","date":"2024-05-18T17:15:31.000Z","permalink":"/Tips/JavaScript/Data/001/","category":["JavaScript"],"tag":["Tips"],"description":"解构 {...xxx} 只能实现第一层，当有多层的时候还是浅拷贝 JSON JSON.parse(JSON.stringify(xxx)) 该方法不会拷贝内部函数 递归 利用递归实现函数 structuredClone MessageChannel MessageChannel: Channel Messaging API 的 MessageChann...","head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/Tips/JavaScript/Data/001/"}],["meta",{"property":"og:title","content":"深克隆"}],["meta",{"property":"og:description","content":"解构 {...xxx} 只能实现第一层，当有多层的时候还是浅拷贝 JSON JSON.parse(JSON.stringify(xxx)) 该方法不会拷贝内部函数 递归 利用递归实现函数 structuredClone MessageChannel MessageChannel: Channel Messaging API 的 MessageChann..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T10:05:42.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:tag","content":"Tips"}],["meta",{"property":"article:published_time","content":"2024-05-18T17:15:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T10:05:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深克隆\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-18T17:15:31.000Z\\",\\"dateModified\\":\\"2024-06-21T10:05:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[{"level":3,"title":"解构","slug":"解构","link":"#解构","children":[]},{"level":3,"title":"JSON","slug":"json","link":"#json","children":[]},{"level":3,"title":"递归","slug":"递归","link":"#递归","children":[]},{"level":3,"title":"structuredClone","slug":"structuredclone","link":"#structuredclone","children":[]},{"level":3,"title":"MessageChannel","slug":"messagechannel","link":"#messagechannel","children":[]}],"git":{"createdTime":1716969129000,"updatedTime":1718964342000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":2}]},"readingTime":{"minutes":0.73,"words":219},"filePathRelative":"zh/小技巧/JavaScript/数据操作相关/001.深克隆.md","localizedDate":"2024年5月18日","excerpt":"<h3>解构</h3>\\n<blockquote>\\n<p>{...xxx} 只能实现第一层，当有多层的时候还是浅拷贝</p>\\n</blockquote>\\n<h3>JSON</h3>\\n<blockquote>\\n<p>JSON.parse(JSON.stringify(xxx))  该方法不会拷贝内部函数</p>\\n</blockquote>\\n<h3>递归</h3>\\n<blockquote>\\n<p>利用递归实现函数</p>\\n</blockquote>\\n<h3>structuredClone</h3>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> a <span class=\\"token operator\\">=</span>  <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">a</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">b</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">2</span>  <span class=\\"token punctuation\\">}</span>\\na<span class=\\"token punctuation\\">.</span>c <span class=\\"token operator\\">=</span> a\\n<span class=\\"token keyword\\">let</span> b <span class=\\"token operator\\">=</span> <span class=\\"token function\\">structuredClone</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">let</span> c <span class=\\"token operator\\">=</span> a\\na<span class=\\"token punctuation\\">.</span>a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span>\\n\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// {a: 2, b: 2, c: {a: 2, b: 2, c: {…}} }</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// {a: 1, b: 2, c: {a: 1, b: 2, c: {…}} }</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>c<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// {a: 2, b: 2, c: {a: 2, b: 2, c: {…}} }</span>\\n</code></pre></div>","autoDesc":true}');export{m as comp,b as data};
