import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c,a as n,f as e,w as t,b as s,e as o}from"./app-BjgGF4P2.js";const r={},u=s(`<h2 id="css" tabindex="-1"><a class="header-anchor" href="#css"><span>CSS</span></a></h2><h3 id="rem、px、em-字体大小" tabindex="-1"><a class="header-anchor" href="#rem、px、em-字体大小"><span>rem、px、em 字体大小</span></a></h3><blockquote><p><strong>px</strong>是相对于显示器屏幕分辨率的存在，是一个 <strong>绝对单位</strong>，不随页面缩放而变化。计算方式为：<code>1px = 1/96英寸</code>。</p><p><strong>em</strong>是相对于 <strong>元素自身</strong> 的字体大小的存在，如果元素没有设置字体大小，则相对于父元素的字体大小。</p><p><strong>rem</strong>是相对于 <strong>根元素（即html元素）</strong> 的字体大小的存在，它不受 <strong>元素字体大小</strong> 和 <strong>父元素字体大小</strong> 的影响，只受根元素字体大小的影响。</p></blockquote><h3 id="css-选择器特性-继承性、-层叠性、优先级" tabindex="-1"><a class="header-anchor" href="#css-选择器特性-继承性、-层叠性、优先级"><span>CSS 选择器特性: 继承性、 层叠性、优先级</span></a></h3><blockquote><p><strong>继承性</strong></p><ul><li><strong>字体系列</strong> 属性</li><li><strong>文本相关</strong> 属性</li><li><strong>元素可见性</strong> 属性</li><li><strong>列表相关</strong> 属性</li><li><strong>表格相关</strong> 属性</li><li><strong>其他</strong> 属性，如：cursor <strong>（光标样式）</strong>、direction <strong>（文本方向）</strong>、unicode-bidi <strong>（双向文本处理）</strong>、outline <strong>（轮廓线）</strong>、quotes <strong>（引用样式）</strong>、pointer-events <strong>（指针事件）</strong>。</li></ul><p>优先级 写 CSS 样式的时候，会给同一个元素添加多个样式，此时谁的权重高就显示谁的样式 其中 <strong>!important</strong> &gt; <strong>行内样式</strong> &gt; <strong>id</strong> &gt; <strong>类/伪类/属性</strong> &gt; <strong>标签</strong> &gt; <strong>全局选择器</strong> &gt; <strong>浏览器默认样式</strong></p></blockquote><h3 id="transform、-translate、transition" tabindex="-1"><a class="header-anchor" href="#transform、-translate、transition"><span>transform、 translate、transition</span></a></h3><blockquote><p><strong>Transform 变形</strong>， rotate旋转、skew扭曲、scale缩放、translate移动、matrix 2D转换方法</p><p><strong>Translate 平移</strong></p><p><strong>Transition 过渡</strong>， property运动 duration持续时间 timing-function delay延迟</p></blockquote><h3 id="bfc的布局规则" tabindex="-1"><a class="header-anchor" href="#bfc的布局规则"><span>BFC的布局规则</span></a></h3><blockquote><ol><li>内部的 box 会在垂直方向上，一个接一个的放置</li><li>box 垂直方向 的距离由 margin 决定，属于同一个BFC的两个相邻 box 的 margin 会发生重叠</li><li>BFC 的区域不会与浮动元素区域重叠</li><li>BFC 就是页面上一个独立容器，容器内的子元素不会影响到外面的元素</li><li>计算 BFC 的高度时，浮动元素也参与计算</li></ol></blockquote><h2 id="js" tabindex="-1"><a class="header-anchor" href="#js"><span>JS</span></a></h2><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h3><blockquote><p>基本数据类型： number，bigInt， boolean， null，undefined，string，symbol， 基本数据类型保存在栈内存中，保存的就是一个具体的值</p><p>引用数据类型：object (后面不算) date，RegExp，function，array， 保存在堆内存当中，声明一个引用类型的变量，他保存的就是应用数据类型的地址</p><p>假如声明两个引用类型同时指向一个地址的时候，修改其中一个那么另一个也发生改变</p></blockquote><h3 id="类型转换优先级" tabindex="-1"><a class="header-anchor" href="#类型转换优先级"><span>类型转换优先级</span></a></h3><blockquote><p><strong>[Symbol.toPrimitive] -&gt; valueOf -&gt; toString</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// [object Object]2</span>

a<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;toString&#39;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// toString2</span>

a<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;valueOf&#39;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// valueOf2</span>

a<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toPrimitive<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;[Symbol.toPrimitive]&#39;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// [Symbol.toPrimitive]2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>闭包</span></a></h3><p><code>描述</code>： 函数嵌套函数，内部函数被外部函数返回并保存下来，就会产生闭包</p><p><code>特点</code>： 可以重复利用变量，并且这个变量不会污染全局；这个变量一直保存在内存中，不会被垃圾回收机制回收</p><p><code>缺点</code>： 闭包较多的时候，会消耗内存，导致页面性能下降，在IE浏览器中会导致内存泄露</p><p><code>使用</code>： 防抖，节流，函数嵌套函数避免全局污染</p><blockquote><p><strong>高级描述：</strong></p><ol><li><code>函数</code> + <code>其定义时所处的词法环境</code></li><li><code>函数本身</code> + <code>内部属性[Environment]</code></li></ol><p><strong>内存泄漏条件：</strong></p><ol><li><strong>持有了不再需要的函数引用，会导致函数关联的 <code>词法环境</code> 无法销毁，从而导致内存泄露</strong></li><li><strong>当多个函数 <code>共享词法环境</code> 时，会导致词法环境膨胀，从而导致出现 <code>无法触达</code> 也 <code>无法回收</code> 的内存空间，导致内存泄漏</strong></li></ol></blockquote><h3 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域"><span>作用域</span></a></h3><p><code>描述</code>：作用域是指在运行时，代码中的某些特定部分中变量、函数和对象的可访问性</p><p>作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行。</p><p>ES6 之前 JavaScript 没有块级作用域，只有全局作用域和函数作用域。</p><p>ES6 提出了 <strong>块级作用域</strong> 所声明的变量在指定块的作用域外无法被访问。</p><blockquote><p><strong>高级描述：</strong> 执行上下文中的词法环境</p></blockquote><h3 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链"><span>作用域链</span></a></h3><p>由词法环境中的 <strong>outerEnv指针</strong> 形成的链条</p><p>当前作用域没有定义的变量，这成为 自由变量 。自由变量的值如何得到 —— 向父级作用域寻找。</p><p>如果父级也没呢？再一层一层向上寻找，直到找到全局作用域还是没找到，就宣布放弃。</p><p>这种一层一层的关系，就是 作用域链 。</p><blockquote><p><strong>高级描述：</strong> 词法环境形成的链条</p></blockquote><h3 id="typeof、instanceof、constructor、object-prototype-tostring-call" tabindex="-1"><a class="header-anchor" href="#typeof、instanceof、constructor、object-prototype-tostring-call"><span>Typeof、instanceof、constructor、Object.prototype.toString.call</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Typeof</span>
<span class="token keyword">typeof</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;number&#39; 只能检测基本数据类型</span>

<span class="token comment">// Instanceof</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span>
<span class="token comment">// true 只能检测引用数据类型</span>

<span class="token comment">// Constructor</span>
<span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> String<span class="token punctuation">;</span> 
<span class="token comment">// true 基本能够检测基本类型和引用类型，但是如果声明构造函数，并把它的原型换指向Array，就不对了</span>

<span class="token comment">// Object.prototype.toString.call  </span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment">// &#39;[object Number]&#39; 能够完全检测基本类型和引用类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事件委托" tabindex="-1"><a class="header-anchor" href="#事件委托"><span>事件委托</span></a></h3><blockquote><p>事件委托又叫事件代理，原理是利用事件冒泡的机制来实现，也就是说把子元素的事件绑定到了父元素的身上，</p><p>如果子元素阻止了事件冒泡(Event.stopPropagation)，那么委托也就不成立</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token punctuation">)</span>  <span class="token comment">// True 事件捕获， false 事件冒泡</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="this-指向" tabindex="-1"><a class="header-anchor" href="#this-指向"><span>this 指向</span></a></h3><blockquote><p>全局对象中的 this 指向 window</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// Window</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>全局作用域 或 普通函数的 this 指向 window</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// Window</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>全局作用域 或 普通函数的 this 指向 window</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token string">&#39;123&#39;</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// String {&#39;123&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>New 关键字改变了 this 指向 (二义性导致的)</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Window</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aa</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>apply，call，bind 改变 this 的指向（非箭头函数）</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Window</span>
<span class="token function">a</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span> <span class="token comment">// String {&#39;123&#39;}</span>
<span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">// Number {123}</span>
<span class="token function">a</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Number {1234}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>箭头函数中的this，它在定义的时候就已经确定好了，如果外层有函数，则是外层函数的this，没有的话就是window</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;内部非箭头函数&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;内部箭头函数&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// Window</span>
<span class="token comment">// 内部非箭头函数 Window</span>
<span class="token comment">// 内部箭头函数 Window</span>

<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 123</span>
<span class="token comment">// 内部非箭头函数 Window</span>
<span class="token comment">// 内部箭头函数 123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>匿名函数中的this永远指向window，匿名函数的执行环境具有全局性，因此指向window</p></blockquote><h3 id="new-操作符做了什么" tabindex="-1"><a class="header-anchor" href="#new-操作符做了什么"><span>new 操作符做了什么</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">newFun</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1.先创建一个空对象</span>
  <span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 2.把空对象和构造函数通过原型链进行链接</span>
  newObj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> fn<span class="token punctuation">.</span>prototype
  <span class="token comment">// 3.把构造函数的this绑定到新的空对象上</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token comment">// 4.根据构造函数返回的类型进行判断，如果是引用数据类型，则返回这个引用类型，如果是值类型，则返回对象</span>
  <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result <span class="token operator">:</span> newObj
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,54),d={id:"浏览器渲染原理",tabindex:"-1"},k={class:"header-anchor",href:"#浏览器渲染原理"},h=s('<p>整个渲染流程分为多个阶段，分别是： <code>HTML 解析</code>、<code>样式计算</code>、<code>布局</code>、<code>分层</code>、<code>绘制</code>、<code>分块</code>、<code>光栅化</code>、<code>画</code></p><p>每个阶段都有明确的输入输出，「<strong>上一个阶段的输出</strong>」 会成为 「<strong>下一个阶段的输入</strong>」。</p><p>这样，整个渲染流程就形成了一套组织严密的生产流水线。</p><figure><img src="https://shaohui-jin.github.io/picx-images-hosting/blog/EventLoop/渲染流水线.41xtnyj74g.webp" alt="" width="800" tabindex="0" loading="lazy"><figcaption>渲染流水线</figcaption></figure>',4),g={id:"事件循环",tabindex:"-1"},v={class:"header-anchor",href:"#事件循环"},m=s(`<p>事件循环又叫做消息循环，是浏览器 <strong>渲染主线程</strong> 的工作方式。</p><p>在 Chrome 的源码中，它开启一个不会结束的 for 循环，每次循环从消息队列中取出 <strong>第一个任务</strong>执行，而其他线程只需要在合适的时候将任务加入到 <strong>队列末尾</strong> 即可。</p><p>过去把消息队列简单分为 <strong>宏队列</strong> 和 <strong>微队列</strong>，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。</p><p>根据 W3C 官方的解释，每个任务有不同的类型，<strong>同类型的任务必须在同一个队列</strong>，<strong>不同的任务可以属于不同的队列</strong>。</p><p>不同任务队列有 <strong>不同的优先级</strong>，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。</p><p>但浏览器 <strong>必须</strong> 有一个<strong>微队列</strong>，微队列的任务一定具有 <strong>最高的优先级</strong>，必须优先调度执行。</p><h3 id="settimeout最小执行时间" tabindex="-1"><a class="header-anchor" href="#settimeout最小执行时间"><span>setTimeout最小执行时间</span></a></h3><blockquote><p>HTML规定最小时间为4ms</p></blockquote><h3 id="setinterval最小执行时间" tabindex="-1"><a class="header-anchor" href="#setinterval最小执行时间"><span>setInterval最小执行时间</span></a></h3><blockquote><p>HTML规定最小时间为10ms</p></blockquote><h2 id="es6" tabindex="-1"><a class="header-anchor" href="#es6"><span>ES6</span></a></h2><h3 id="es6新特性" tabindex="-1"><a class="header-anchor" href="#es6新特性"><span>ES6新特性</span></a></h3><ol><li>块级作用域（let const）</li></ol><blockquote><p>不存在变量提升、存在暂时性死区、块级作用域、不能在同一个作用域重复声明</p></blockquote><ol start="2"><li>新增语法糖 class</li><li>基本数据类型 symbol</li><li>新增解构赋值</li><li>新增箭头函数 不能作为构造函数使用，不能使用new、箭头函数没有原型、箭头函数没有arguments、箭头函数不能使用call、bind、apply改变this的指向、this指向 外层第一个函数的this</li><li>新增了函数参数的默认值</li><li>数组新增了api</li><li>对象数组新增了拓展运算符 console.log(1, ...[2, 3, 4], 5)</li><li>Promise</li><li>模块化 import export</li><li>新增set(不重复) map(key类型不受限制)数据结构</li><li>新增generator</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">xxfn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">yield</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token string">&#39;d end...&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> _xxfn <span class="token operator">=</span> <span class="token function">xxfn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//第一个yield语句</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_xxfn<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//{value: &#39;a&#39;, done: false}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h3><ol><li>原型链的继承</li></ol><p>让一个构造函数的原型是另一个类型的实例，那么这个构造函数new出来的实例就具有该实例的属性</p><p><code>优点</code>：写法方便简洁，容易理解</p><p><code>缺点</code>： 对象实例共享所有继承的属性和方法，无法向父类构造函数传值</p><ol start="2"><li>借用构造函数继承</li></ol><p>在子类型构造函数的内部调用父类型的构造函数，使用 apply或call将父对象的构造函数绑定在子对象上</p><p><code>优点</code>： 解决了原型链实现继承的不能传参的问题以及父类的原型共享问题</p><p><code>缺点</code>：借用构造函数的缺点是方法都在构造函数中定义，因此无法实现函数复用。在父类型的原型中定义的方法，对子类型而言是不可见的</p><ol start="3"><li>组合继承</li></ol><p>使用原型链实现对原型属性和方法的继承 通过借用构造函数进来实现对实例属性的继承 既通过在原型上定义方法，实现了函数复用，又能保证每个实例都有自己的属性</p><h3 id="es6的-class" tabindex="-1"><a class="header-anchor" href="#es6的-class"><span>Es6的 class</span></a></h3><p>Class通过extends关键字来实现继承，其本质是</p><ol><li>先创造出父类的this对象</li><li>然后用子类的构造函数修改this</li><li>子类的构造函数中必须调用super方法，且只有在调用了super之后才能使用this，因为子类的this对象是继承父类的this对象，然后对其进行加工，而super方法表示的是父类的构造函数，用来新建父类的this对象</li></ol><h3 id="为什么要虚拟dom" tabindex="-1"><a class="header-anchor" href="#为什么要虚拟dom"><span>为什么要虚拟DOM</span></a></h3><ol><li>框架设计： 渲染页面运行render函数，组件化开发时，属性改变时只能全量渲染，直接操作DOM代价过高，使用虚拟DOM代替</li><li>跨平台：除了浏览器环境不存在dom，打包其他环境的时候可以用虚拟dom坐中间转换</li></ol><h2 id="网络" tabindex="-1"><a class="header-anchor" href="#网络"><span>网络</span></a></h2><h3 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax"><span>ajax</span></a></h3><ul><li>「<strong>AJAX 全称 Asynchronous Javascript And XML</strong>」：异步JavaScript和xml，是一种技术的统称 <ul><li>「<strong>XHR 全称 XmlHttpRequest</strong>」：HTML源生实现Ajax的一种技术</li><li>「<strong>Fetch</strong>」：基于 Promise 的一种api，在es6时提出，用于代替 XHR 实现 AJAX 的一种技术</li></ul></li><li>「<strong>axios</strong>」 是一种 使用 Promise + xhr 封装的第三方库</li><li>「<strong>umi-request</strong>」： 基于 fetch 封装的第三方库</li></ul><blockquote><p><strong>上传下载进度：</strong></p><ol><li>xhr <code>支持上传、下载进度展示</code></li><li>fetch 不支持上传进度，<code>支持下载进度展示</code></li></ol><p><strong>Abort 取消机制：</strong></p><ol><li>xhr <code>支持终止请求</code></li><li>fetch <code>本身不支持</code>，可使用 <code>信号控制器 AbortController</code> 实现</li></ol><p><strong>Timeout 超时机制:</strong></p><ol><li>xhr <code>支持超时机制</code></li><li>fetch <strong>本身不支持</strong>，可使用 <code>信号控制器 AbortController</code> 以及 <code>Promise</code> 实现</li></ol></blockquote><h3 id="preload、prefetch、async、defer的区别" tabindex="-1"><a class="header-anchor" href="#preload、prefetch、async、defer的区别"><span>preload、prefetch、async、defer的区别</span></a></h3><blockquote><p>preload 和 prefetch：用于资源提前加载，分别适用当前页面和未来可能需要的资源。</p><p>async 和 defer：用于控制脚本的加载与执行时机，async最适合独立脚本，defer适合需要按顺序执行且依赖DOM的脚本。</p></blockquote><h4 id="preload" tabindex="-1"><a class="header-anchor" href="#preload"><span>Preload</span></a></h4><ul><li><strong>功能</strong>：<link rel="preload">用于告诉浏览器在页面加载过程中需要高优先级加载的资源。</li><li><strong>应用场景</strong>：适用于当前页面必需而非即时加载的资源，如字体、关键图片和重要的CSS/JS文件。</li><li><strong>优点</strong>：提高页面关键资源的加载速度。</li><li><strong>限制</strong>：因为是高优先级下载，如果网络资源有限，可能会导致其他资源的加载延迟。</li><li><strong>浏览器行为</strong>：浏览器在解析HTML时并行下载指定的资源。</li></ul><h4 id="prefetch" tabindex="-1"><a class="header-anchor" href="#prefetch"><span>Prefetch</span></a></h4><ul><li><strong>功能</strong>：<link rel="prefetch">用于告诉浏览器资源之后可能会在未来使用，因此可以在空闲时间提前下载。</li><li><strong>应用场景</strong>：适合异步加载的资源或下一次导航可能需要的资源，如页面的下一步内容。</li><li><strong>优点</strong>：利用浏览器空闲时间，提升未来页面导航的速度。</li><li><strong>限制</strong>：优先级低，可能会被中断以满足当前页的资源加载。</li><li><strong>浏览器行为</strong>：在页面空闲时和带宽允许时下载资源，不会阻塞页面的当前加载。</li></ul><h4 id="async" tabindex="-1"><a class="header-anchor" href="#async"><span>Async</span></a></h4><ul><li><strong>功能</strong>：async用于异步加载JavaScript，脚本下载完成后立即执行，而不阻塞文档的解析。</li><li><strong>应用场景</strong>：适合不依赖于DOM结构的独立脚本，如统计和广告跟踪。</li><li><strong>优点</strong>：尽早下载并执行脚本，而不阻塞解析，提高页面加载速度。</li><li><strong>限制</strong>：脚本执行顺序无法保证，可能导致脚本依赖关系错乱。</li><li><strong>浏览器行为</strong>：脚本下载并解析其他HTML文档元素，下载完成后立即执行。</li></ul><h4 id="defer" tabindex="-1"><a class="header-anchor" href="#defer"><span>Defer</span></a></h4><ul><li><strong>功能</strong>：defer用于延迟执行JavaScript，直到HTML解析完毕之后再执行。</li><li><strong>应用场景</strong>：适合依赖DOM结构的脚本，如在文档加载完成后操作DOM的脚本。</li><li><strong>优点</strong>：保证脚本按顺序执行，并且不阻塞HTML解析。</li><li><strong>限制</strong>：需要解析完成后执行。</li><li><strong>浏览器行为</strong>：按顺序下载脚本文件，HTML解析完成后按顺序执行。</li></ul><h3 id="同源与跨域" tabindex="-1"><a class="header-anchor" href="#同源与跨域"><span>同源与跨域</span></a></h3><h4 id="同源策略限制了什么" tabindex="-1"><a class="header-anchor" href="#同源策略限制了什么"><span>同源策略限制了什么</span></a></h4><ol><li>DOM层面：同源策略限制了不同源的js对当前DOM对象的读写操作</li><li>数据层面：同源策略限制了不同源站点读取当前站点的Cookies、IndexDB、LocalStorage等数据</li><li>网络层面：同源策略限制了数据发送给非同源站点（比如XML HttpRequest、Fetch等无法请求不同源站点</li></ol><h4 id="跨域三要素" tabindex="-1"><a class="header-anchor" href="#跨域三要素"><span>跨域三要素</span></a></h4><p>浏览器限制：即浏览器对跨域行为进行检测和阻止 触发跨域的三要素之一：协议、域名、端口 发起的是xhr请求：即XMLHttpRequest</p><h4 id="如何解决跨域" tabindex="-1"><a class="header-anchor" href="#如何解决跨域"><span>如何解决跨域</span></a></h4><p>被调用方解决跨域设置 访问控制允许来源 response.addHeader(‘Access-Control-Allow-Origin’,’*’ ) 调用方使用Nginx 代理调用方请求，目的是为了和被调用方的域名端口保持一致 jsonp</p><h4 id="a-com-b-com-跨域发生在一步" tabindex="-1"><a class="header-anchor" href="#a-com-b-com-跨域发生在一步"><span>a.com -&gt; b.com 跨域发生在一步</span></a></h4><h3 id="get请求跨域吗" tabindex="-1"><a class="header-anchor" href="#get请求跨域吗"><span>get请求跨域吗</span></a></h3><h3 id="什么时候会发送预检请求" tabindex="-1"><a class="header-anchor" href="#什么时候会发送预检请求"><span>什么时候会发送预检请求</span></a></h3><h3 id="网络策略" tabindex="-1"><a class="header-anchor" href="#网络策略"><span>网络策略</span></a></h3><h4 id="cors-跨源资源共享" tabindex="-1"><a class="header-anchor" href="#cors-跨源资源共享"><span>CORS 跨源资源共享</span></a></h4><h4 id="csp-内容安全策略" tabindex="-1"><a class="header-anchor" href="#csp-内容安全策略"><span>CSP 内容安全策略</span></a></h4><p>同源策略是期望让我们的页面引用的资源都来自一个源，对于不是同源的文件，我们默认就是不安全的 CSP的核心思想就是让服务器决定浏览器可以加载那些资源，让服务器决定浏览器是否能够执行加载的JS代码。 Content-Security-Policy: default-src &#39;self&#39;; img-src *; media-src media1.com media2.com; script-src userscripts.example.com</p><h2 id="vue3" tabindex="-1"><a class="header-anchor" href="#vue3"><span>Vue3</span></a></h2><h3 id="ref-和-reactive的用法" tabindex="-1"><a class="header-anchor" href="#ref-和-reactive的用法"><span>ref 和 reactive的用法</span></a></h3><h3 id="reactive的响应式" tabindex="-1"><a class="header-anchor" href="#reactive的响应式"><span>reactive的响应式</span></a></h3><h2 id="react" tabindex="-1"><a class="header-anchor" href="#react"><span>React</span></a></h2><h3 id="类组件-和-函数组件-的区别" tabindex="-1"><a class="header-anchor" href="#类组件-和-函数组件-的区别"><span>类组件 和 函数组件 的区别</span></a></h3><h3 id="usestate-和-useref" tabindex="-1"><a class="header-anchor" href="#usestate-和-useref"><span>useState 和 useRef</span></a></h3><h3 id="uselayouteffect" tabindex="-1"><a class="header-anchor" href="#uselayouteffect"><span>useLayoutEffect</span></a></h3><h2 id="代码测试" tabindex="-1"><a class="header-anchor" href="#代码测试"><span>代码测试</span></a></h2><h2 id="灵活" tabindex="-1"><a class="header-anchor" href="#灵活"><span>灵活</span></a></h2><h3 id="长列表问题" tabindex="-1"><a class="header-anchor" href="#长列表问题"><span>长列表问题</span></a></h3><ol><li>帧动画加载</li><li>冻结数组</li><li>触底加载</li><li>文档碎片Fragment</li></ol>`,71);function b(f,x){const a=p("RouteLink");return i(),c("div",null,[u,n("h3",d,[n("a",k,[n("span",null,[e(a,{to:"/Promotion/JavaScript/BrowserRenderingPrinciples/"},{default:t(()=>[o("浏览器渲染原理")]),_:1})])])]),h,n("h3",g,[n("a",v,[n("span",null,[e(a,{to:"/Promotion/JavaScript/BrowserProcessModel/"},{default:t(()=>[o("事件循环")]),_:1})])])]),m])}const j=l(r,[["render",b],["__file","index.html.vue"]]),S=JSON.parse('{"path":"/InterviewQuestion/","title":"面试题汇总","lang":"zh-CN","frontmatter":{"title":"面试题汇总","lang":"zh-CN","date":"2024-05-05T16:59:31.000Z","permalink":"/InterviewQuestion/","headerDepth":5,"gitInclude":["../../../src/zh/友情推广/JavaScript/闭包以及内存泄漏原因.md","../../../src/zh/友情推广/JavaScript/浏览器/浏览器渲染原理.md","../../../src/zh/友情推广/JavaScript/浏览器/浏览器进程模型.md","../../../src/zh/友情推广/JavaScript/网络/AJAX - XHR与Fetch.md"],"description":"CSS rem、px、em 字体大小 px是相对于显示器屏幕分辨率的存在，是一个 绝对单位，不随页面缩放而变化。计算方式为：1px = 1/96英寸。 em是相对于 元素自身 的字体大小的存在，如果元素没有设置字体大小，则相对于父元素的字体大小。 rem是相对于 根元素（即html元素） 的字体大小的存在，它不受 元素字体大小 和 父元素字体大小 的影...","head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/InterviewQuestion/"}],["meta",{"property":"og:title","content":"面试题汇总"}],["meta",{"property":"og:description","content":"CSS rem、px、em 字体大小 px是相对于显示器屏幕分辨率的存在，是一个 绝对单位，不随页面缩放而变化。计算方式为：1px = 1/96英寸。 em是相对于 元素自身 的字体大小的存在，如果元素没有设置字体大小，则相对于父元素的字体大小。 rem是相对于 根元素（即html元素） 的字体大小的存在，它不受 元素字体大小 和 父元素字体大小 的影..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-12T10:48:50.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:published_time","content":"2024-05-05T16:59:31.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-12T10:48:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面试题汇总\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-05T16:59:31.000Z\\",\\"dateModified\\":\\"2025-04-12T10:48:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[{"level":2,"title":"CSS","slug":"css","link":"#css","children":[{"level":3,"title":"rem、px、em 字体大小","slug":"rem、px、em-字体大小","link":"#rem、px、em-字体大小","children":[]},{"level":3,"title":"CSS 选择器特性: 继承性、 层叠性、优先级","slug":"css-选择器特性-继承性、-层叠性、优先级","link":"#css-选择器特性-继承性、-层叠性、优先级","children":[]},{"level":3,"title":"transform、 translate、transition","slug":"transform、-translate、transition","link":"#transform、-translate、transition","children":[]},{"level":3,"title":"BFC的布局规则","slug":"bfc的布局规则","link":"#bfc的布局规则","children":[]}]},{"level":2,"title":"JS","slug":"js","link":"#js","children":[{"level":3,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":3,"title":"类型转换优先级","slug":"类型转换优先级","link":"#类型转换优先级","children":[]},{"level":3,"title":"闭包","slug":"闭包","link":"#闭包","children":[]},{"level":3,"title":"作用域","slug":"作用域","link":"#作用域","children":[]},{"level":3,"title":"作用域链","slug":"作用域链","link":"#作用域链","children":[]},{"level":3,"title":"Typeof、instanceof、constructor、Object.prototype.toString.call","slug":"typeof、instanceof、constructor、object-prototype-tostring-call","link":"#typeof、instanceof、constructor、object-prototype-tostring-call","children":[]},{"level":3,"title":"事件委托","slug":"事件委托","link":"#事件委托","children":[]},{"level":3,"title":"this 指向","slug":"this-指向","link":"#this-指向","children":[]},{"level":3,"title":"new 操作符做了什么","slug":"new-操作符做了什么","link":"#new-操作符做了什么","children":[]},{"level":3,"title":"浏览器渲染原理","slug":"浏览器渲染原理","link":"#浏览器渲染原理","children":[]},{"level":3,"title":"事件循环","slug":"事件循环","link":"#事件循环","children":[]},{"level":3,"title":"setTimeout最小执行时间","slug":"settimeout最小执行时间","link":"#settimeout最小执行时间","children":[]},{"level":3,"title":"setInterval最小执行时间","slug":"setinterval最小执行时间","link":"#setinterval最小执行时间","children":[]}]},{"level":2,"title":"ES6","slug":"es6","link":"#es6","children":[{"level":3,"title":"ES6新特性","slug":"es6新特性","link":"#es6新特性","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"Es6的 class","slug":"es6的-class","link":"#es6的-class","children":[]},{"level":3,"title":"为什么要虚拟DOM","slug":"为什么要虚拟dom","link":"#为什么要虚拟dom","children":[]}]},{"level":2,"title":"网络","slug":"网络","link":"#网络","children":[{"level":3,"title":"ajax","slug":"ajax","link":"#ajax","children":[]},{"level":3,"title":"preload、prefetch、async、defer的区别","slug":"preload、prefetch、async、defer的区别","link":"#preload、prefetch、async、defer的区别","children":[{"level":4,"title":"Preload","slug":"preload","link":"#preload","children":[]},{"level":4,"title":"Prefetch","slug":"prefetch","link":"#prefetch","children":[]},{"level":4,"title":"Async","slug":"async","link":"#async","children":[]},{"level":4,"title":"Defer","slug":"defer","link":"#defer","children":[]}]},{"level":3,"title":"同源与跨域","slug":"同源与跨域","link":"#同源与跨域","children":[{"level":4,"title":"同源策略限制了什么","slug":"同源策略限制了什么","link":"#同源策略限制了什么","children":[]},{"level":4,"title":"跨域三要素","slug":"跨域三要素","link":"#跨域三要素","children":[]},{"level":4,"title":"如何解决跨域","slug":"如何解决跨域","link":"#如何解决跨域","children":[]},{"level":4,"title":"a.com -> b.com 跨域发生在一步","slug":"a-com-b-com-跨域发生在一步","link":"#a-com-b-com-跨域发生在一步","children":[]}]},{"level":3,"title":"get请求跨域吗","slug":"get请求跨域吗","link":"#get请求跨域吗","children":[]},{"level":3,"title":"什么时候会发送预检请求","slug":"什么时候会发送预检请求","link":"#什么时候会发送预检请求","children":[]},{"level":3,"title":"网络策略","slug":"网络策略","link":"#网络策略","children":[{"level":4,"title":"CORS 跨源资源共享","slug":"cors-跨源资源共享","link":"#cors-跨源资源共享","children":[]},{"level":4,"title":"CSP 内容安全策略","slug":"csp-内容安全策略","link":"#csp-内容安全策略","children":[]}]}]},{"level":2,"title":"Vue3","slug":"vue3","link":"#vue3","children":[{"level":3,"title":"ref 和 reactive的用法","slug":"ref-和-reactive的用法","link":"#ref-和-reactive的用法","children":[]},{"level":3,"title":"reactive的响应式","slug":"reactive的响应式","link":"#reactive的响应式","children":[]}]},{"level":2,"title":"React","slug":"react","link":"#react","children":[{"level":3,"title":"类组件 和 函数组件 的区别","slug":"类组件-和-函数组件-的区别","link":"#类组件-和-函数组件-的区别","children":[]},{"level":3,"title":"useState 和 useRef","slug":"usestate-和-useref","link":"#usestate-和-useref","children":[]},{"level":3,"title":"useLayoutEffect","slug":"uselayouteffect","link":"#uselayouteffect","children":[]}]},{"level":2,"title":"代码测试","slug":"代码测试","link":"#代码测试","children":[]},{"level":2,"title":"灵活","slug":"灵活","link":"#灵活","children":[{"level":3,"title":"长列表问题","slug":"长列表问题","link":"#长列表问题","children":[]}]}],"git":{"createdTime":1714900279000,"updatedTime":1744454930000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":7}]},"readingTime":{"minutes":11.37,"words":3412},"filePathRelative":"zh/面试题 - 随时看看/面试题汇总.md","localizedDate":"2024年5月5日","excerpt":"<h2>CSS</h2>\\n<h3>rem、px、em 字体大小</h3>\\n<blockquote>\\n<p><strong>px</strong>是相对于显示器屏幕分辨率的存在，是一个 <strong>绝对单位</strong>，不随页面缩放而变化。计算方式为：<code>1px = 1/96英寸</code>。</p>\\n<p><strong>em</strong>是相对于 <strong>元素自身</strong> 的字体大小的存在，如果元素没有设置字体大小，则相对于父元素的字体大小。</p>\\n<p><strong>rem</strong>是相对于 <strong>根元素（即html元素）</strong> 的字体大小的存在，它不受 <strong>元素字体大小</strong> 和 <strong>父元素字体大小</strong> 的影响，只受根元素字体大小的影响。</p>\\n</blockquote>","autoDesc":true}');export{j as comp,S as data};
