import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as e,c,a as n,d as i,e as l,f as a,b as s}from"./app-CLMeatBe.js";const u={},r=s('<h2 id="何为进程" tabindex="-1"><a class="header-anchor" href="#何为进程"><span>何为进程</span></a></h2><p>程序运行需要有他自己专属的 「<strong>内存空间</strong>」，这块内存空间可以理解为 「<strong>进程</strong>」。</p><p>每个应用至少有一个进程，进程之间相互独立，即便要通信，也要双方同意。</p><h2 id="何为线程" tabindex="-1"><a class="header-anchor" href="#何为线程"><span>何为线程</span></a></h2><p>有了进程后，就可以运行程序的代码了。</p><p>运行代码的 「<strong>人</strong>」 称之为 「<strong>线程</strong>」。</p><p>一个进程至少有一个线程，所以在进程开启后会自动创建一个线程来运行代码，该线程称之为 <strong>主线程</strong>。</p><p>如果程序需要同时执行多块代码，主线程就会启动更多的线程来执行代码，所以一个进程中可以创建多个线程。</p><figure><img src="https://shaohui-jin.github.io/picx-images-hosting/blog/EventLoop/进程与线程.1e8d7pc5hg.webp" alt="" width="800" tabindex="0" loading="lazy"><figcaption>进程与线程</figcaption></figure><h2 id="浏览器有哪些进程和线程" tabindex="-1"><a class="header-anchor" href="#浏览器有哪些进程和线程"><span>浏览器有哪些进程和线程</span></a></h2><p>浏览器是个多进程多线程的应用程序，内部工作极其复杂。</p><p>为了避免相互影响，为了减少连环崩溃的几率，当浏览器启动后，它会自动启动多个进程。</p><figure><img src="https://shaohui-jin.github.io/picx-images-hosting/blog/EventLoop/浏览器进程模型.8z6abp4qcq.webp" alt="" width="800" tabindex="0" loading="lazy"><figcaption>浏览器进程模型</figcaption></figure><p>其中，最主要的进程有:</p><ol><li>浏览器进程：主要负责<strong>界面显示</strong>、<strong>用户交互</strong>、<strong>子进程管理</strong>等。浏览器进程内部会启动多个线程处理不同的任务。</li><li>网络进程：负责<strong>加载网络资源</strong>。网络进程内部会启动多个线程来处理不同的网络任务。</li><li>渲染进程：渲染进程启动后，会开启一个<strong>渲染主线程</strong>，主线程负责<strong>执行HTML、CSS、JS代码</strong>。 默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间不相互影响。</li></ol><h2 id="渲染主线程是如何工作的" tabindex="-1"><a class="header-anchor" href="#渲染主线程是如何工作的"><span>渲染主线程是如何工作的</span></a></h2><p>渲染主线程是浏览器中最繁忙的线程，需要他处理的任务包括但不限于：</p><ul><li>解析 HTML</li><li>解析 CSS</li><li>计算样式</li><li>布局</li><li>处理图层</li><li>每秒把页面绘制 60次</li><li>执行全局 JS 代码</li><li>执行事件处理函数</li><li>执行计时器的回调函数</li><li>......</li></ul><h3 id="任务调度" tabindex="-1"><a class="header-anchor" href="#任务调度"><span>任务调度</span></a></h3><p>要处理这么多的任务，主线程遇到了一个前所未有的难题:如何调度任务?</p><p>比如:</p><ul><li>我正在执行一个 JS 函数，执行到一半的时候用户点击了按钮，我该立即去执行点击事件的处理函数吗?</li><li>我正在执行一个 S 函数，执行到一半的时候某个计时器到达了时间，我该立即去执行它的回调吗?</li><li>浏览器进程通知我&quot;用户点击了按钮&quot;，与此同时，某个计时器也到达了时间，我应该处理哪一个呢?</li><li>......</li></ul><p>渲染主线程想出了一个绝妙的主意来处理这个问题： <strong>排队</strong></p><figure><img src="https://shaohui-jin.github.io/picx-images-hosting/blog/EventLoop/消息队列.4xuaxjxc0n.webp" alt="" width="800" tabindex="0" loading="lazy"><figcaption>消息队列</figcaption></figure><ol><li>在最开始的时候，渲染主线程会进入一个无限循环</li><li>每一次循环会检查消息队列中是否有任务存在。如果有就取出第一个任务执行，执行完一个后进入下一次循环。如果没有则进入休眠状态。</li><li>其他所有线程(包括其他进程的线程)可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务。</li></ol><p>这样一来，就可以让每个任务有条不紊的、持续的进行下去了。</p><p><strong>整个过程，被称之为事件循环(消息循环)</strong></p><h2 id="知识延伸" tabindex="-1"><a class="header-anchor" href="#知识延伸"><span>知识延伸</span></a></h2><p>代码在执行过程中，会遇到一些无法立即处理的任务，比如:</p><ul><li>计时完成后需要执行的任务 -- <code>setTimeout</code>、<code>setInterval</code></li><li>网络通信完成后需要执行的任务 -- <code>XHR</code>、<code>Fetch</code></li><li>用户操作后需要执行的任务 -- <code>addEventListener</code></li></ul><p>如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于「<strong>阻塞</strong>」的状态，从而导致浏览 器「<strong>卡死</strong>」</p><figure><img src="https://shaohui-jin.github.io/picx-images-hosting/blog/EventLoop/计时线程消息队列.2obae48djf.webp" alt="" width="800" tabindex="0" loading="lazy"><figcaption>计时线程消息队列</figcaption></figure><p><strong>渲染主线程承担着极其重要的工作，无论如何也不能阻塞！</strong></p><p>因此，浏览器选择异步解决这个问题</p><h3 id="何为异步-重点" tabindex="-1"><a class="header-anchor" href="#何为异步-重点"><span>何为异步(重点)</span></a></h3><p>JS是一门单线程的语言，这是因为它运行在浏览器的 <strong>渲染主线程</strong> 中，而 <strong>渲染主线程</strong> 只有一个。</p><p>而渲染主线程承担着诸多的工作，<strong>渲染页面</strong>、<strong>执行JS</strong> 都在其中运行。</p><p>如果使用同步的方式，就极有可能导致主线程产生 <strong>阻塞</strong>，从而导致消息队列中的很多其他任务无法得到执行。</p><p>这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。 所以浏览器采用异步的方式来避免。</p><p>具体做法是当某些任务发生时，比如 <strong>计时器</strong>、<strong>网络</strong>、<strong>事件监听</strong>，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。</p><p>当其他线程完成时，将事先传递的<strong>回调函数包装成任务</strong>，加入到 <strong>消息队列</strong> 的 <strong>末尾排队</strong>，等待主线程调度执行。</p><p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p><h3 id="任务有优先级吗-重点" tabindex="-1"><a class="header-anchor" href="#任务有优先级吗-重点"><span>任务有优先级吗(重点)</span></a></h3><p>任务没有优先级，在消息队列中先进先出</p><p>但消息队列是有优先级的</p>',45),k={class:"hint-container important"},d=s('<p class="hint-container-title">随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法</p><ul><li>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。</li><li>在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。</li><li>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行.</li></ul><p>在目前 chrome 的实现中，至少包含了下面的队列:</p><ul><li>延时队列：用于存放计时器到达后的回调任务，优先级「<strong>中</strong>」</li><li>交互队列：用于存放用户操作后产生的事件处理任务，优先级「<strong>高</strong>」</li><li>微队列：用户存放需要最快执行的任务，优先级「<strong>最高</strong>」</li></ul>',4),g={style:{"text-align":"right"}},v={href:"https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpo",target:"_blank",rel:"noopener noreferrer"},m=n("h3",{id:"阐述下什么是事件循环-重点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#阐述下什么是事件循环-重点"},[n("span",null,"阐述下什么是事件循环 (重点)")])],-1),h=s("<p>事件循环又叫做消息循环，是浏览器 <strong>渲染主线程</strong> 的工作方式。</p><p>在 Chrome 的源码中，它开启一个不会结束的 for 循环，每次循环从消息队列中取出 <strong>第一个任务</strong>执行，而其他线程只需要在合适的时候将任务加入到 <strong>队列末尾</strong> 即可。</p><p>过去把消息队列简单分为 <strong>宏队列</strong> 和 <strong>微队列</strong>，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。</p><p>根据 W3C 官方的解释，每个任务有不同的类型，<strong>同类型的任务必须在同一个队列</strong>，<strong>不同的任务可以属于不同的队列</strong>。</p><p>不同任务队列有 <strong>不同的优先级</strong>，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。</p><p>但浏览器 <strong>必须</strong> 有一个<strong>微队列</strong>，微队列的任务一定具有 <strong>最高的优先级</strong>，必须优先调度执行。</p>",6),b=s(`<h4 id="案例一" tabindex="-1"><a class="header-anchor" href="#案例一"><span>案例一</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;定时器开始啦&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;马上执行for循环啦&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    i <span class="token operator">==</span> <span class="token number">99</span> <span class="token operator">&amp;&amp;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行then函数啦&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;代码执行结束&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://shaohui-jin.github.io/picx-images-hosting/blog/EventLoop/事件循环案例1.3ye7lwc6j0.webp" alt="" width="800" tabindex="0" loading="lazy"><figcaption>事件循环案例1</figcaption></figure><h4 id="案例二" tabindex="-1"><a class="header-anchor" href="#案例二"><span>案例二</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;5&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;7&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;8&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;9&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;11&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;12&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://shaohui-jin.github.io/picx-images-hosting/blog/EventLoop/事件循环案例2.8z6adgaf6s.webp" alt="" width="800" tabindex="0" loading="lazy"><figcaption>事件循环案例2</figcaption></figure><h4 id="案例三" tabindex="-1"><a class="header-anchor" href="#案例三"><span>案例三</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;set1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span>  <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;then4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;then2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;pr1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;then1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;set2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span>  <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;then3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// pr1  2  then1  then3  set1  then2  then4  set2</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="案例四" tabindex="-1"><a class="header-anchor" href="#案例四"><span>案例四</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// script start    async1 start   async2    promise1    script end    async1 end    promise2   setTimeout</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="js-中的计时器能做到精确计时吗-重点" tabindex="-1"><a class="header-anchor" href="#js-中的计时器能做到精确计时吗-重点"><span>JS 中的计时器能做到精确计时吗 (重点)</span></a></h3><p>不行，因为:</p><ol><li>计算机硬件没有 <strong><code>原子钟</code></strong>，无法做到精确计时</li><li>操作系统的计时函数本身就有少量偏差，<strong><code>由于 JS 的计时器最终调用的是操作系统的函数</code></strong>，也就携带了这些偏差</li><li>按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级 <strong><code>超过5层</code></strong>，则会带有 <strong><code>4毫秒的最少时间</code></strong>，这样在计时 <code>时间少于4毫秒时又带来了偏差</code></li><li>受 <strong><code>事件循环</code></strong> 的影响，计时器的回调函数只能在 <strong><code>主线程空闲时运行</code></strong>，因此又带来了偏差</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>单线程是异步产生的「<strong>原因</strong>」</p><p>事件循环是异步的「<strong>实现方式</strong>」</p>`,16);function f(w,y){const t=o("ExternalLinkIcon");return e(),c("div",null,[r,n("div",k,[d,n("div",g,[n("p",null,[n("a",v,[i("W3C 的最新解释"),l(t)])])])]),m,a(" #region info "),h,a(" #endregion info "),b])}const _=p(u,[["render",f],["__file","index.html.vue"]]),S=JSON.parse('{"path":"/Promotion/JavaScript/BrowserProcessModel/","title":"浏览器进程模型","lang":"zh-CN","frontmatter":{"title":"浏览器进程模型","lang":"zh-CN","date":"2024-03-23T10:24:33.000Z","permalink":"/Promotion/JavaScript/BrowserProcessModel/","category":["JavaScript"],"tag":["JavaScript"],"gitInclude":["../../../../../src/zh/精选文章/JavaScript/浏览器/事件循环案例/demo1.js","../../../../../src/zh/精选文章/JavaScript/浏览器/事件循环案例/demo2.js","../../../../../src/zh/精选文章/JavaScript/浏览器/事件循环案例/demo3.js","../../../../../src/zh/精选文章/JavaScript/浏览器/事件循环案例/demo4.js"],"description":"何为进程 程序运行需要有他自己专属的 「内存空间」，这块内存空间可以理解为 「进程」。 每个应用至少有一个进程，进程之间相互独立，即便要通信，也要双方同意。 何为线程 有了进程后，就可以运行程序的代码了。 运行代码的 「人」 称之为 「线程」。 一个进程至少有一个线程，所以在进程开启后会自动创建一个线程来运行代码，该线程称之为 主线程。 如果程序需要同...","head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/Promotion/JavaScript/BrowserProcessModel/"}],["meta",{"property":"og:title","content":"浏览器进程模型"}],["meta",{"property":"og:description","content":"何为进程 程序运行需要有他自己专属的 「内存空间」，这块内存空间可以理解为 「进程」。 每个应用至少有一个进程，进程之间相互独立，即便要通信，也要双方同意。 何为线程 有了进程后，就可以运行程序的代码了。 运行代码的 「人」 称之为 「线程」。 一个进程至少有一个线程，所以在进程开启后会自动创建一个线程来运行代码，该线程称之为 主线程。 如果程序需要同..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://shaohui-jin.github.io/picx-images-hosting/blog/EventLoop/进程与线程.1e8d7pc5hg.webp \\"进程与线程\\" =800x"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-19T15:03:48.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2024-03-23T10:24:33.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-19T15:03:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器进程模型\\",\\"image\\":[\\"https://shaohui-jin.github.io/picx-images-hosting/blog/EventLoop/进程与线程.1e8d7pc5hg.webp \\\\\\"进程与线程\\\\\\" =800x\\",\\"https://shaohui-jin.github.io/picx-images-hosting/blog/EventLoop/浏览器进程模型.8z6abp4qcq.webp \\\\\\"浏览器进程模型\\\\\\" =800x\\",\\"https://shaohui-jin.github.io/picx-images-hosting/blog/EventLoop/消息队列.4xuaxjxc0n.webp \\\\\\"消息队列\\\\\\" =800x\\",\\"https://shaohui-jin.github.io/picx-images-hosting/blog/EventLoop/计时线程消息队列.2obae48djf.webp \\\\\\"计时线程消息队列\\\\\\" =800x\\",\\"https://shaohui-jin.github.io/picx-images-hosting/blog/EventLoop/事件循环案例1.3ye7lwc6j0.webp \\\\\\"事件循环案例1\\\\\\" =800x\\",\\"https://shaohui-jin.github.io/picx-images-hosting/blog/EventLoop/事件循环案例2.8z6adgaf6s.webp \\\\\\"事件循环案例2\\\\\\" =800x\\"],\\"datePublished\\":\\"2024-03-23T10:24:33.000Z\\",\\"dateModified\\":\\"2025-05-19T15:03:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[{"level":2,"title":"何为进程","slug":"何为进程","link":"#何为进程","children":[]},{"level":2,"title":"何为线程","slug":"何为线程","link":"#何为线程","children":[]},{"level":2,"title":"浏览器有哪些进程和线程","slug":"浏览器有哪些进程和线程","link":"#浏览器有哪些进程和线程","children":[]},{"level":2,"title":"渲染主线程是如何工作的","slug":"渲染主线程是如何工作的","link":"#渲染主线程是如何工作的","children":[{"level":3,"title":"任务调度","slug":"任务调度","link":"#任务调度","children":[]}]},{"level":2,"title":"知识延伸","slug":"知识延伸","link":"#知识延伸","children":[{"level":3,"title":"何为异步(重点)","slug":"何为异步-重点","link":"#何为异步-重点","children":[]},{"level":3,"title":"任务有优先级吗(重点)","slug":"任务有优先级吗-重点","link":"#任务有优先级吗-重点","children":[]},{"level":3,"title":"阐述下什么是事件循环 (重点)","slug":"阐述下什么是事件循环-重点","link":"#阐述下什么是事件循环-重点","children":[{"level":4,"title":"案例一","slug":"案例一","link":"#案例一","children":[]},{"level":4,"title":"案例二","slug":"案例二","link":"#案例二","children":[]},{"level":4,"title":"案例三","slug":"案例三","link":"#案例三","children":[]},{"level":4,"title":"案例四","slug":"案例四","link":"#案例四","children":[]}]},{"level":3,"title":"JS 中的计时器能做到精确计时吗 (重点)","slug":"js-中的计时器能做到精确计时吗-重点","link":"#js-中的计时器能做到精确计时吗-重点","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1744883120000,"updatedTime":1747667028000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":2}]},"readingTime":{"minutes":7.67,"words":2301},"filePathRelative":"zh/精选文章/JavaScript/浏览器/浏览器进程模型.md","localizedDate":"2024年3月23日","excerpt":"<h2>何为进程</h2>\\n<p>程序运行需要有他自己专属的 「<strong>内存空间</strong>」，这块内存空间可以理解为 「<strong>进程</strong>」。</p>\\n<p>每个应用至少有一个进程，进程之间相互独立，即便要通信，也要双方同意。</p>\\n<h2>何为线程</h2>\\n<p>有了进程后，就可以运行程序的代码了。</p>\\n<p>运行代码的 「<strong>人</strong>」 称之为 「<strong>线程</strong>」。</p>\\n<p>一个进程至少有一个线程，所以在进程开启后会自动创建一个线程来运行代码，该线程称之为 <strong>主线程</strong>。</p>","autoDesc":true}');export{_ as comp,S as data};
