import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,a as n,f as s,e as c,w as l,b as i}from"./app-wd9UAkBE.js";const u={},r=i(`<h3 id="一行代码完成结构加赋值" tabindex="-1"><a class="header-anchor" href="#一行代码完成结构加赋值"><span>一行代码完成结构加赋值</span></a></h3><p>经常使用结构赋值，<strong>一般都是先结构，再赋值</strong>，当然也可以一行就完成解构加赋值操作，看起来非常简化，当然可读性你懂得！</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> people <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> people<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> people<span class="token punctuation">.</span>age <span class="token punctuation">}</span> <span class="token operator">=</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span> <span class="token comment">// {&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:16}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对基础数据类型进行解构" tabindex="-1"><a class="header-anchor" href="#对基础数据类型进行解构"><span>对基础数据类型进行解构</span></a></h3><p>实际上可以对 <strong>基础数据类型</strong> 解构</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">length</span> <span class="token operator">:</span> a <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&#39;1234&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对数组解构快速拿到最后一项值" tabindex="-1"><a class="header-anchor" href="#对数组解构快速拿到最后一项值"><span>对数组解构快速拿到最后一项值</span></a></h3><p>实际上是可以对 <strong>数组</strong> 解构赋值拿到 <strong>length</strong> 属性的，通过这个特性也可以做更多的事情。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token operator">:</span> first<span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span> last <span class="token punctuation">}</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> length<span class="token punctuation">,</span> last<span class="token punctuation">)</span> <span class="token comment">// 1 3 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="将下标转为中文零一二三" tabindex="-1"><a class="header-anchor" href="#将下标转为中文零一二三"><span>将下标转为中文零一二三...</span></a></h3><p>日常可能有的列表需要将对应的 <strong>012345</strong> 转为中文的 <strong>一、二、三、四、五...</strong>，在老的项目看到还有通过自己手动定义很多行这样的写法，于是写了一个这样的方法转换</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">transfromNumber</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token constant">INDEX_MAP</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;零&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;壹&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;贰&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;叁&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;肆&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;伍&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;陆&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;柒&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;捌&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;玖&#39;</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>number<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token comment">// if(number === 10) return INDEX_MAP[number]</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> pre  <span class="token operator">+</span> <span class="token constant">INDEX_MAP</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">transfromNumber</span><span class="token punctuation">(</span><span class="token number">1233331</span><span class="token punctuation">)</span> <span class="token comment">// &#39;壹贰叁叁叁叁壹&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断整数的不同方法" tabindex="-1"><a class="header-anchor" href="#判断整数的不同方法"><span>判断整数的不同方法</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/* 1.任何整数都会被1整除，即余数是0。利用这个规则来判断是否是整数。但是对字符串不准确 */</span>
<span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> obj<span class="token operator">%</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 1. 添加一个是数字的判断 */</span>
<span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">&amp;&amp;</span> obj<span class="token operator">%</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 2. 使用Math.round、Math.ceil、Math.floor判断 整数取整后还是等于自己。利用这个特性来判断是否是整数*/</span>
<span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> obj
<span class="token punctuation">}</span>

<span class="token comment">/* 3. 通过parseInt判断 某些场景不准确 */</span>
<span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">===</span> obj
<span class="token punctuation">}</span>

<span class="token comment">/* 4. 通过位运算符 */</span>
<span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>obj <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> obj
<span class="token punctuation">}</span>

<span class="token comment">/* 5.ES6提供了Number.isInteger */</span>
<span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过css检测系统的主题色从而全局修改样式" tabindex="-1"><a class="header-anchor" href="#通过css检测系统的主题色从而全局修改样式"><span>通过css检测系统的主题色从而全局修改样式</span></a></h3><p><strong>@media</strong> 的属性 <strong>prefers-color-scheme</strong> 就可以知道当前的系统主题，当然使用前需要查查兼容性</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">prefers-color-scheme</span><span class="token punctuation">:</span> dark<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">prefers-color-scheme</span><span class="token punctuation">:</span> light<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>javascript也可以轻松做到</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;theme-mode&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>mode <span class="token operator">==</span> <span class="token string">&#39;dark&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>mode <span class="token operator">==</span> <span class="token string">&#39;light&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">&#39;(prefers-color-scheme: dark)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>matches<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// dark mode</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组随机打乱顺序" tabindex="-1"><a class="header-anchor" href="#数组随机打乱顺序"><span>数组随机打乱顺序</span></a></h3><p>通过 <strong>0.5-Math.random()</strong> 得到一个随机数，再通过两次 <strong>sort</strong> 排序打乱的更彻底，但是这个方法实际上并不够随机，如果是企业级运用，建议使用第二种洗牌算法</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0.5</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0.5</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> randomIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>randomIndex<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>randomIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="随机获取一个boolean值" tabindex="-1"><a class="header-anchor" href="#随机获取一个boolean值"><span>随机获取一个Boolean值</span></a></h3><p>和上个原理相同，通过随机数获取，<strong>Math.random()</strong> 的区间是 <strong>0-0.99</strong>，用<strong>0.5</strong>在中间百分之五十的概率</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">randomBool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">0.5</span> <span class="token operator">&gt;</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="把数组的第一项放到最后一项" tabindex="-1"><a class="header-anchor" href="#把数组的第一项放到最后一项"><span>把数组的第一项放到最后一项</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">addToLast</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="把数组最后一项移到第一项" tabindex="-1"><a class="header-anchor" href="#把数组最后一项移到第一项"><span>把数组最后一项移到第一项</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">addToFirst</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="利用set数组去重" tabindex="-1"><a class="header-anchor" href="#利用set数组去重"><span>利用set数组去重</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">uniqueArr</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dom节点平滑滚动到可视区域-顶部-底部" tabindex="-1"><a class="header-anchor" href="#dom节点平滑滚动到可视区域-顶部-底部"><span>dom节点平滑滚动到可视区域，顶部，底部</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  element<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">behavior</span><span class="token operator">:</span> <span class="token string">&quot;smooth&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">block</span><span class="token operator">:</span> <span class="token string">&quot;start&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 顶部</span>
  element<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">behavior</span><span class="token operator">:</span> <span class="token string">&quot;smooth&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">block</span><span class="token operator">:</span> <span class="token string">&quot;end&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 底部</span>
  element<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">behavior</span><span class="token operator">:</span> <span class="token string">&quot;smooth&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 可视区域</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取随机颜色" tabindex="-1"><a class="header-anchor" href="#获取随机颜色"><span>获取随机颜色</span></a></h3><p>日常我们经常会需要获取一个随机颜色，通过随机数即可完成</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getRandomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0xffffff</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检测是否为空对象" tabindex="-1"><a class="header-anchor" href="#检测是否为空对象"><span>检测是否为空对象</span></a></h3><p>通过使用 <strong>Es6</strong> 的 <strong>Reflect<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></strong> 静态方法判断它的长度就可以判断是否是空对象了，也可以通过 <strong>Object.keys()</strong> 来判断</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="boolean转换" tabindex="-1"><a class="header-anchor" href="#boolean转换"><span>Boolean转换</span></a></h3><p>一些场景下会将<strong>boolean</strong>值定义为场景，但是在js中非空的字符串都会被认为是true</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toBoolean</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> truthyValues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> normalizedValue <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> truthyValues<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>normalizedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">toBoolean</span><span class="token punctuation">(</span><span class="token string">&#39;TRUE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">toBoolean</span><span class="token punctuation">(</span><span class="token string">&#39;FALSE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">toBoolean</span><span class="token punctuation">(</span><span class="token string">&#39;YES&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;yes&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="各种数组克隆方法" tabindex="-1"><a class="header-anchor" href="#各种数组克隆方法"><span>各种数组克隆方法</span></a></h3><p>数组克隆的方法其实特别多了，看看有没有你没见过的！</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">structuredClone</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="比较两个时间大小" tabindex="-1"><a class="header-anchor" href="#比较两个时间大小"><span>比较两个时间大小</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> b<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="计算两个时间之间的月份差异" tabindex="-1"><a class="header-anchor" href="#计算两个时间之间的月份差异"><span>计算两个时间之间的月份差异</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">monthDiff</span><span class="token punctuation">(</span><span class="token parameter">startDate<span class="token punctuation">,</span> endDate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>endDate<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startDate<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">-</span> startDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> endDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一步从时间中提取年月日时分秒" tabindex="-1"><a class="header-anchor" href="#一步从时间中提取年月日时分秒"><span>一步从时间中提取年月日时分秒</span></a></h3><p>时间格式化轻松解决，一步获取到年月日时分秒毫秒，由于 <strong>toISOString</strong> 会丢失时区，导致时间差八小时，所以在格式化之前我们加上八个小时时间即可</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">extract</span><span class="token punctuation">(</span><span class="token parameter">date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^0-9]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;2022&#39;, &#39;09&#39;, &#39;19&#39;, &#39;18&#39;, &#39;06&#39;, &#39;11&#39;, &#39;187&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断一个参数是不是函数" tabindex="-1"><a class="header-anchor" href="#判断一个参数是不是函数"><span>判断一个参数是不是函数</span></a></h3><p>有时候方法需要传入一个<strong>函数回调</strong>，但是需要检测其类型，我们可以通过 <strong>Object</strong>的原型方法去检测，当然这个方法可以准确检测任何类型。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;[object Function]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;[object GeneratorFunction]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;[object AsyncFunction]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;[object Promise]&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="计算两个坐标之间的距离" tabindex="-1"><a class="header-anchor" href="#计算两个坐标之间的距离"><span>计算两个坐标之间的距离</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token parameter">p1<span class="token punctuation">,</span> p2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2))</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检测两个dom节点是否覆盖重叠" tabindex="-1"><a class="header-anchor" href="#检测两个dom节点是否覆盖重叠"><span>检测两个dom节点是否覆盖重叠</span></a></h3><p>有些场景下需要判断 <strong>dom</strong> 是否发生 <strong>碰撞了</strong> 或者 <strong>重叠了</strong> ，我们可以通过 <strong>getBoundingClientRect</strong> 获取到dom的 <strong>x1,y1,x2,y2</strong> 坐标然后进行坐标比对即可判断出来</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">overlaps</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>x1 <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x2 <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>x1 <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>x2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y1 <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>y2 <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>y1 <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断是否是nodejs环境" tabindex="-1"><a class="header-anchor" href="#判断是否是nodejs环境"><span>判断是否是NodeJs环境</span></a></h3><p>前端的日常开发是<code>离不开nodeJs</code>的，通过判断全局环境来检测是否是<strong>nodeJs</strong>环境</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> process <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>versions <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数求和" tabindex="-1"><a class="header-anchor" href="#参数求和"><span>参数求和</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr class="footnotes-sep">`,66),k={class:"footnotes"},d={class:"footnotes-list"},v={id:"footnote1",class:"footnote-item"},m=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function g(b,h){const a=p("RouteLink");return e(),o("div",null,[r,n("section",k,[n("ol",d,[n("li",v,[n("p",null,[s("Reflect 可以看这篇文章 "),c(a,{to:"/FrontEnd/JavaScript/Reflect/#object-keys-%E5%92%8C-reflect-ownkeys-%E5%B7%AE%E5%88%AB"},{default:l(()=>[s("通道")]),_:1}),s(),m])])])])])}const j=t(u,[["render",g],["__file","index.html.vue"]]),w=JSON.parse(`{"path":"/Promotion/JavaScript-Skill/","title":"JavaScript 小技巧","lang":"zh-CN","frontmatter":{"title":"JavaScript 小技巧","lang":"zh-CN","date":"2023-02-28T10:37:02.000Z","permalink":"/Promotion/JavaScript-Skill/","icon":"skill","category":["JavaScript"],"tag":["JavaScript"],"description":"一行代码完成结构加赋值 经常使用结构赋值，一般都是先结构，再赋值，当然也可以一行就完成解构加赋值操作，看起来非常简化，当然可读性你懂得！ 对基础数据类型进行解构 实际上可以对 基础数据类型 解构 对数组解构快速拿到最后一项值 实际上是可以对 数组 解构赋值拿到 length 属性的，通过这个特性也可以做更多的事情。 将下标转为中文零一二三... 日常可...","head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/Promotion/JavaScript-Skill/"}],["meta",{"property":"og:title","content":"JavaScript 小技巧"}],["meta",{"property":"og:description","content":"一行代码完成结构加赋值 经常使用结构赋值，一般都是先结构，再赋值，当然也可以一行就完成解构加赋值操作，看起来非常简化，当然可读性你懂得！ 对基础数据类型进行解构 实际上可以对 基础数据类型 解构 对数组解构快速拿到最后一项值 实际上是可以对 数组 解构赋值拿到 length 属性的，通过这个特性也可以做更多的事情。 将下标转为中文零一二三... 日常可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-20T15:05:52.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:published_time","content":"2023-02-28T10:37:02.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-20T15:05:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 小技巧\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-28T10:37:02.000Z\\",\\"dateModified\\":\\"2025-03-20T15:05:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[{"level":3,"title":"一行代码完成结构加赋值","slug":"一行代码完成结构加赋值","link":"#一行代码完成结构加赋值","children":[]},{"level":3,"title":"对基础数据类型进行解构","slug":"对基础数据类型进行解构","link":"#对基础数据类型进行解构","children":[]},{"level":3,"title":"对数组解构快速拿到最后一项值","slug":"对数组解构快速拿到最后一项值","link":"#对数组解构快速拿到最后一项值","children":[]},{"level":3,"title":"将下标转为中文零一二三...","slug":"将下标转为中文零一二三","link":"#将下标转为中文零一二三","children":[]},{"level":3,"title":"判断整数的不同方法","slug":"判断整数的不同方法","link":"#判断整数的不同方法","children":[]},{"level":3,"title":"通过css检测系统的主题色从而全局修改样式","slug":"通过css检测系统的主题色从而全局修改样式","link":"#通过css检测系统的主题色从而全局修改样式","children":[]},{"level":3,"title":"数组随机打乱顺序","slug":"数组随机打乱顺序","link":"#数组随机打乱顺序","children":[]},{"level":3,"title":"随机获取一个Boolean值","slug":"随机获取一个boolean值","link":"#随机获取一个boolean值","children":[]},{"level":3,"title":"把数组的第一项放到最后一项","slug":"把数组的第一项放到最后一项","link":"#把数组的第一项放到最后一项","children":[]},{"level":3,"title":"把数组最后一项移到第一项","slug":"把数组最后一项移到第一项","link":"#把数组最后一项移到第一项","children":[]},{"level":3,"title":"利用set数组去重","slug":"利用set数组去重","link":"#利用set数组去重","children":[]},{"level":3,"title":"dom节点平滑滚动到可视区域，顶部，底部","slug":"dom节点平滑滚动到可视区域-顶部-底部","link":"#dom节点平滑滚动到可视区域-顶部-底部","children":[]},{"level":3,"title":"获取随机颜色","slug":"获取随机颜色","link":"#获取随机颜色","children":[]},{"level":3,"title":"检测是否为空对象","slug":"检测是否为空对象","link":"#检测是否为空对象","children":[]},{"level":3,"title":"Boolean转换","slug":"boolean转换","link":"#boolean转换","children":[]},{"level":3,"title":"各种数组克隆方法","slug":"各种数组克隆方法","link":"#各种数组克隆方法","children":[]},{"level":3,"title":"比较两个时间大小","slug":"比较两个时间大小","link":"#比较两个时间大小","children":[]},{"level":3,"title":"计算两个时间之间的月份差异","slug":"计算两个时间之间的月份差异","link":"#计算两个时间之间的月份差异","children":[]},{"level":3,"title":"一步从时间中提取年月日时分秒","slug":"一步从时间中提取年月日时分秒","link":"#一步从时间中提取年月日时分秒","children":[]},{"level":3,"title":"判断一个参数是不是函数","slug":"判断一个参数是不是函数","link":"#判断一个参数是不是函数","children":[]},{"level":3,"title":"计算两个坐标之间的距离","slug":"计算两个坐标之间的距离","link":"#计算两个坐标之间的距离","children":[]},{"level":3,"title":"检测两个dom节点是否覆盖重叠","slug":"检测两个dom节点是否覆盖重叠","link":"#检测两个dom节点是否覆盖重叠","children":[]},{"level":3,"title":"判断是否是NodeJs环境","slug":"判断是否是nodejs环境","link":"#判断是否是nodejs环境","children":[]},{"level":3,"title":"参数求和","slug":"参数求和","link":"#参数求和","children":[]}],"git":{"createdTime":1742483152000,"updatedTime":1742483152000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":1}]},"readingTime":{"minutes":5.04,"words":1511},"filePathRelative":"zh/友情推广/JavaScript 小技巧.md","localizedDate":"2023年2月28日","excerpt":"<h3>一行代码完成结构加赋值</h3>\\n<p>经常使用结构赋值，<strong>一般都是先结构，再赋值</strong>，当然也可以一行就完成解构加赋值操作，看起来非常简化，当然可读性你懂得！</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> people <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">null</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">let</span> result <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'张三'</span><span class=\\"token punctuation\\">,</span>  <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">16</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> people<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">age</span><span class=\\"token operator\\">:</span> people<span class=\\"token punctuation\\">.</span>age <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>people<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// {\\"name\\":\\"张三\\",\\"age\\":16}</span>\\n</code></pre></div>","autoDesc":true}`);export{j as comp,w as data};
