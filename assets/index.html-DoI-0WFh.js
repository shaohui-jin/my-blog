import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-tyuRd-7e.js";const e={},p=t(`<h2 id="ts中的类" tabindex="-1"><a class="header-anchor" href="#ts中的类"><span>TS中的类</span></a></h2><p><strong>类（Class）</strong> 是 <strong>面向对象</strong> 程序设计 <strong>（OOP，Object-Oriented Programming）</strong> 实现信息封装的基础</p><p>类是一种用户定义的 <strong>引用数据</strong> 类型，也称类类型</p><p>传统的 面向对象语言 基本都是基于类的，JavaScript 基于 <strong>原型</strong> 的方式让开发者多了很多理解成本</p><p>在 ES6 之后，JavaScript 拥有了 <strong>class</strong> 关键字，虽然本质依然是 <strong>构造函数</strong>，但是使用起来已经方便了许多</p><p>但是 JavaScript 的 class 依然有一些特性还没有加入，比如 <strong>修饰符</strong> 和 <strong>抽象类</strong></p><p>TypeScript 的 class 支持 面向对象 的 所有特性，比如 <strong>类</strong>、<strong>接口</strong> 等</p><h3 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h3><p>定义类的关键字为 <strong>class</strong>，后面紧跟类名，类可以包含以下几个模块（类的数据成员）：</p><ul><li>字段：类里面声明的变量</li><li>构造函数：类实例化时调用，可以为类的对象分配内存</li><li>方法：对象要执行的操作</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token comment">// 字段</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token comment">// 构造函数</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>

  <span class="token comment">// 方法</span>
  <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;姓名为:  &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h3><p>类的 <strong>继承</strong> 使用 <strong>extends</strong> 的关键字</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">talk</span><span class="token punctuation">(</span>someThing<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someThing<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The man ran ten meters&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> aMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

aMan<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The man ran ten meters</span>
aMan<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token string">&quot;It&#39;s exhausting&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// It&#39;s exhausting</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Man 是一个 <strong>派生类</strong>，它派生自 Man 基类，<strong>派生类</strong> 通常被称作 <strong>子类</strong>，<strong>基类</strong> 通常被称作 <strong>超类</strong></p><p>Man 类继承了 People 类，因此实例 aMan 也能够使用 People 类 talk 方法</p><p>同样，类继承后，子类可以对父类的方法重新定义，这个过程称之为方法的重写</p><p>通过 <strong>super关键字</strong> 是对父类的直接引用，该关键字可以引用父类的属性和方法，如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">talk</span><span class="token punctuation">(</span>someThing<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someThing<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The man ran ten meters&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token string">&quot;People don&#39;t want to speak anymore&quot;</span><span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Man don&#39;t want to speak anymore&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> aMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

aMan<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The man ran ten meters</span>
aMan<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// People don&#39;t want to speak anymore    Man don&#39;t want to speak anymore</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符"><span>修饰符</span></a></h3><h4 id="公共修饰符-public" tabindex="-1"><a class="header-anchor" href="#公共修饰符-public"><span>公共修饰符 public</span></a></h4><p>可以被访问的类程序里定义的成员</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// zhangsan</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> aMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aMan<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// zhangsan</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="私有修饰符-private" tabindex="-1"><a class="header-anchor" href="#私有修饰符-private"><span>私有修饰符 private</span></a></h4><p>只能够在该类的 <strong>内部</strong> 进行访问</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// zhangsan</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// Property &#39;age&#39; is private and only accessible within class &#39;People&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> aMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aMan<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// zhangsan</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aMan<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// Property &#39;age&#39; is private and only accessible within class &#39;People&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="受保护修饰符-protect" tabindex="-1"><a class="header-anchor" href="#受保护修饰符-protect"><span>受保护修饰符 protect</span></a></h4><p>除了在该类的 <strong>内部</strong> 可以访问，还可以在 <strong>子类</strong> 中仍然可以访问</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
  <span class="token keyword">protected</span> sex<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;female&#39;</span> <span class="token operator">=</span> <span class="token string">&#39;male&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// zhangsan</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// Property &#39;age&#39; is private and only accessible within class &#39;People&#39;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span> <span class="token comment">// male</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> aMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aMan<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// zhangsan</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aMan<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// Property &#39;age&#39; is private and only accessible within class &#39;People&#39;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aMan<span class="token punctuation">.</span>sex<span class="token punctuation">)</span> <span class="token comment">// Property &#39;sex&#39; is protected and only accessible within class &#39;People&#39; and its subclasses.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="只读修饰符-readonly" tabindex="-1"><a class="header-anchor" href="#只读修饰符-readonly"><span>只读修饰符 readonly</span></a></h4><p>通过 <strong>readonly</strong> 关键字进行声明，只读属性必须在 <strong>声明时</strong> 或 构造函数里 被 <strong>初始化</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">)</span>
people<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;lisi&#39;</span> <span class="token comment">//  Cannot assign to &#39;name&#39; because it is a read-only property.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="静态属性-static" tabindex="-1"><a class="header-anchor" href="#静态属性-static"><span>静态属性 static</span></a></h4><p>这些属性存在于 <strong>类本身</strong> 上面而 不是 <strong>类实例</strong> 上，通过static进行定义，访问这些属性需要通过 <strong>类型.静态属性</strong> 的这种形式访问</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> idCard<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;111xxxxxx11&#39;</span>
  <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>idCard<span class="token punctuation">)</span> <span class="token comment">// Property &#39;idCard&#39; does not exist on type &#39;People&#39;. Did you mean to access the static member &#39;People.idCard&#39; instead?</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>People<span class="token punctuation">.</span>idCard<span class="token punctuation">)</span> <span class="token comment">// 111xxxxxx11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="抽象类-abstract" tabindex="-1"><a class="header-anchor" href="#抽象类-abstract"><span>抽象类 abstract</span></a></h4><p>抽象类 做为 其它派生类 的 基类 使用，它们一般不会直接被实例化，不同于接口，抽象类可以包含成员的实现细节</p><p><strong>abstract</strong> 关键字是用于定义 <strong>抽象类</strong> 和在抽象类内部定义 <strong>抽象方法</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token keyword">abstract</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The people ran ten meters&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
  <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Man don&#39;t want to speak anymore&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> aMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
aMan<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// The people ran ten meters</span>
aMan<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Man don&#39;t want to speak anymore</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><p>除了日常借助 类 的特性完成日常业务代码，还可以将类（class）也可以作为接口，尤其在 <strong>React</strong> 工程中是很常用的，如下：</p><p><code>export default class Carousel extends React.Component&lt;Props, State&gt; {}</code></p><p>由于组件需要传入 <strong>props</strong> 的类型 <strong>Props</strong> ，同时有需要设置默认 <strong>props</strong> 即 <strong>defaultProps</strong>，这时候更加适合使用 class 作为接口 先声明一个类，这个类包含组件 <strong>props</strong> 所需的 <strong>类型</strong> 和 <strong>初始值</strong>：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// props的类型</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> children<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>React<span class="token punctuation">.</span>ReactElement<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span> <span class="token operator">|</span> React<span class="token punctuation">.</span>ReactElement<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">never</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">public</span> speed<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">500</span>
  <span class="token keyword">public</span> height<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">160</span>
  <span class="token keyword">public</span> animation<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;easeInOutQuad&#39;</span>
  <span class="token keyword">public</span> isAuto<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">public</span> autoPlayInterval<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">4500</span>
  <span class="token keyword">public</span> <span class="token function-variable function">afterChange</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token function-variable function">beforeChange</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">public</span> selesctedColor<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">public</span> showDots<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当需要传入 props 类型的时候直接将 Props 作为接口传入，此时 Props 的作用就是接口，而当需要我们设置defaultProps初始值的时候，我们只需要:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>
<span class="token keyword">const</span> defaultProps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Props</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Props 的实例就是 <strong>defaultProps</strong> 的 <strong>初始值</strong>，这就是 <strong>class</strong> 作为 <strong>接口</strong> 的实际应用，</p><p>用一个 class 起到了 <strong>接口</strong> 和 <strong>设置初始值</strong> 两个作用，方便统一管理，减少了代码量</p><h2 id="typescript-的数据类型" tabindex="-1"><a class="header-anchor" href="#typescript-的数据类型"><span>typescript 的数据类型</span></a></h2><p>typescript 和 javascript <strong>几乎一样</strong>，拥有相同的数据类型，另外在 javascript 基础上提供了 <strong>更加实用的类型</strong> 供开发使用</p><p>在开发阶段，可以为 明确的变量定义为 某种类型，这样 typescript 就能在编译阶段进行 <strong>类型检查</strong>，当类型不合符预期结果的时候则会出现错误提示</p><ul><li>boolean（布尔类型）</li><li>number（数字类型）</li><li>string（字符串类型）</li><li>array（数组类型）</li><li>tuple（元组类型）</li><li>enum（枚举类型）</li><li>any（任意类型）</li><li>null 和 undefined 类型</li><li>void 类型</li><li>never 类型</li><li>object 对象类型</li></ul><h3 id="布尔类型-boolean" tabindex="-1"><a class="header-anchor" href="#布尔类型-boolean"><span>布尔类型 boolean</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> flag<span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token comment">// flag = 123; // 错误</span>
flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">//正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数字类型-number" tabindex="-1"><a class="header-anchor" href="#数字类型-number"><span>数字类型 number</span></a></h3><p>typescript 的 数值类型 都是 <strong>浮点数</strong>，可支持<strong>二进制</strong>、<strong>八进制</strong>、<strong>十进制</strong>和<strong>十六进制</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> num<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token comment">// num = &#39;456&#39;; // Type &#39;string&#39; is not assignable to type &#39;number&#39;.</span>
num <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>  <span class="token comment">//正确</span>
<span class="token comment">// 进制表示：</span>
<span class="token keyword">let</span> decLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// 十进制 6</span>
<span class="token keyword">let</span> hexLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制 61453</span>
<span class="token keyword">let</span> binaryLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span> <span class="token comment">// 二进制 10</span>
<span class="token keyword">let</span> octalLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span> <span class="token comment">// 八进制 484</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串类型-string" tabindex="-1"><a class="header-anchor" href="#字符串类型-string"><span>字符串类型 string</span></a></h3><p>可以使用 <strong>双引号</strong> 或 <strong>单引号</strong> 表示字符串</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;this is ts&#39;</span><span class="token punctuation">;</span>
str <span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Gene</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> <span class="token comment">// 注意编辑器存在部分bug，name会报错，跟window的name冲突</span>
<span class="token keyword">let</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> sentence<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> name <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组类型-array" tabindex="-1"><a class="header-anchor" href="#数组类型-array"><span>数组类型 array</span></a></h3><p>通过 <strong>[]</strong> 进行包裹，有两种写法</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 方式一：元素类型后面接上 []</span>
<span class="token keyword">let</span> arr1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;12&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;23&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;45&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;56&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 方式二：使用数组泛型，Array&lt;元素类型&gt;  </span>
<span class="token keyword">let</span> arr2<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元祖类型-tuple" tabindex="-1"><a class="header-anchor" href="#元祖类型-tuple"><span>元祖类型 tuple</span></a></h3><p>表示一个 <strong>已知元素数量</strong> 和 <strong>类型</strong> 的数组，各元素的 <strong>类型可以不相同</strong></p><p>赋值的 <strong>类型</strong>、<strong>位置</strong>、<strong>个数需要</strong>和定义（声明）的一致</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> tupleArr<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tupleArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;34&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
typleArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;34&#39;</span><span class="token punctuation">]</span> <span class="token comment">// Cannot find name &#39;typleArr&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="枚举类型-enum" tabindex="-1"><a class="header-anchor" href="#枚举类型-enum"><span>枚举类型 enum</span></a></h3><p>enum 类型是对 JavaScript 标准数据类型的一个补充</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">}</span>
<span class="token keyword">let</span> c<span class="token operator">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="任何类型-any" tabindex="-1"><a class="header-anchor" href="#任何类型-any"><span>任何类型 any</span></a></h3><p>可以指定任何类型的值，在 <strong>编程阶段</strong> 还不清楚类型的变量指定一个类型，不希望 <strong>类型检查器</strong> 对这些值进行检查，而是直接让它们通过编译阶段的检查</p><p>使用 any 类型允许被赋值为 <strong>任意类型</strong>，甚至可以调用其 <strong>属性</strong>、<strong>方法</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
num <span class="token operator">=</span> <span class="token string">&#39;str&#39;</span><span class="token punctuation">;</span>
num <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token comment">// 定义存储各种类型数据的数组时，示例代码如下：</span>
<span class="token keyword">let</span> arrayList<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;fine&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arrayList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="null-和-和-undefined" tabindex="-1"><a class="header-anchor" href="#null-和-和-undefined"><span>null 和 和 undefined</span></a></h3><p>在 JavaScript 中 null表示 &quot;<strong>什么都没有</strong>&quot;，是一个只有一个值的特殊类型，表示一个<strong>空对象引用</strong>，而 undefined 表示一个 <strong>没有设置值</strong> 的 <strong>变量</strong></p><p>默认情况下 <strong>null</strong> 和 <strong>undefined</strong> 是所有类型的 <strong>子类型</strong>，<code>就是说你可以把 null和 undefined 赋值给 number 类型的变量</code></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 数值类型 或者 undefined</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
num <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
num <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是 ts 配置了 <strong>--strictNullChecks</strong> 标记，null 和 undefined 只能赋值给 <strong>void</strong> 和 <strong>它们各自</strong></p><h3 id="无返回值类型-void" tabindex="-1"><a class="header-anchor" href="#无返回值类型-void"><span>无返回值类型 void</span></a></h3><p>用于标识方法返回值的类型，表示该方法没有返回值</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Ts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不会出现类型-never" tabindex="-1"><a class="header-anchor" href="#不会出现类型-never"><span>不会出现类型 never</span></a></h3><p>never是其他类型（包括null和 undefined）的子类型，可以赋值给任何类型，代表 <strong>从不会出现的值</strong></p><p>但是没有类型是 never 的子类型，这意味着声明 never 的变量只能被 never 类型所赋值</p><p>never 类型一般用来指定 <strong>抛出异常</strong>、<strong>无限循环</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// Type &#39;number&#39; is not assignable to type &#39;never&#39;.</span>

a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 正确的写法</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;错误&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 返回never的函数必须存在无法达到的终点</span>
<span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象类型-object" tabindex="-1"><a class="header-anchor" href="#对象类型-object"><span>对象类型 object</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> obj<span class="token operator">:</span> object<span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;ShiLianAn&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">27</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总而言之" tabindex="-1"><a class="header-anchor" href="#总而言之"><span>总而言之</span></a></h3><p>和 javascript 基本一致，也分成：</p><ul><li>基本类型</li><li>引用类型</li></ul><p>在基础类型上，typescript 增添了 <strong>void</strong>、<strong>any</strong>、<strong>emum</strong> 等原始类型</p><h2 id="ts中的枚举类型" tabindex="-1"><a class="header-anchor" href="#ts中的枚举类型"><span>TS中的枚举类型</span></a></h2><p><strong>枚举</strong> 是一个被 命名 的 <strong>整型常数</strong> 的集合，用于声明一组命名的常数，当一个变量有几种可能的取值时，可以将它定义为 <strong>枚举类型</strong></p><p>通俗来说，<strong>枚举</strong> 就是 <code>一个对象的所有可能取值的集合</code></p><p>在日常生活中也很常见，例如表示星期的 SUNDAY、MONDAY、TUESDAY、WEDNESDAY、THURSDAY、FRIDAY、SATURDAY 就可以看成是一个枚举</p><p>枚举的 说明与结构和 <strong>联合</strong> 相似，其形式为：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>enum 枚举名{
    标识符①[=整型常数],
    标识符②[=整型常数],
    ...
    标识符N[=整型常数],
}枚举变量;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用法-1" tabindex="-1"><a class="header-anchor" href="#用法-1"><span>用法</span></a></h3><p>通过 <strong>enum 关键字</strong> 进行定义</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>  <span class="token punctuation">}</span>
<span class="token keyword">let</span> d<span class="token operator">:</span> Direction<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h3><h5 id="数字枚举" tabindex="-1"><a class="header-anchor" href="#数字枚举"><span>数字枚举</span></a></h5><p>当我们声明一个枚举类型时，虽然没有给它们赋值，但是它们的值其实是 <strong>默认的数字类型</strong>，而且 <strong>默认从0开始</strong> 依次累加</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
  Up<span class="token punctuation">,</span>   <span class="token comment">// 值默认为 0</span>
  Down<span class="token punctuation">,</span> <span class="token comment">// 值默认为 1</span>
  Left<span class="token punctuation">,</span> <span class="token comment">// 值默认为 2</span>
  Right <span class="token comment">// 值默认为 3</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">.</span>Up <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">.</span>Down <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">.</span>Left <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">.</span>Right <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将 <strong>第一个值</strong> 进行赋值后，后面的值也会根据前一个值进行 <strong>累加1</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
  Up <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
  Down<span class="token punctuation">,</span>
  Left<span class="token punctuation">,</span>
  Right
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">.</span>Up<span class="token punctuation">,</span> Direction<span class="token punctuation">.</span>Down<span class="token punctuation">,</span> Direction<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> Direction<span class="token punctuation">.</span>Right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 11 12 13</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="字符串枚举" tabindex="-1"><a class="header-anchor" href="#字符串枚举"><span>字符串枚举</span></a></h5><p>枚举类型的值其实也可以是 <strong>字符串类型</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
  Up <span class="token operator">=</span> <span class="token string">&#39;Up&#39;</span><span class="token punctuation">,</span>
  Down <span class="token operator">=</span> <span class="token string">&#39;Down&#39;</span><span class="token punctuation">,</span>
  Left <span class="token operator">=</span> <span class="token string">&#39;Left&#39;</span><span class="token punctuation">,</span>
  Right <span class="token operator">=</span> <span class="token string">&#39;Right&#39;</span>
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">[</span><span class="token string">&#39;Right&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Direction<span class="token punctuation">.</span>Up<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Right Up</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果设定了 <strong>一个变量为字符串</strong> 之后，后续的字段也 <strong>必须赋值字符串</strong>，否则报错</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
  Up <span class="token operator">=</span> <span class="token string">&#39;UP&#39;</span><span class="token punctuation">,</span>
  Down<span class="token punctuation">,</span> <span class="token comment">// Enum member must have initializer.</span>
  Left<span class="token punctuation">,</span> <span class="token comment">// Enum member must have initializer.</span>
  Right <span class="token comment">// Enum member must have initializer.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="异构枚举" tabindex="-1"><a class="header-anchor" href="#异构枚举"><span>异构枚举</span></a></h5><p>即 将 <strong>数字枚举</strong> 和 <strong>字符串枚举</strong> 结合起来混合起来使用</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> EnumType <span class="token punctuation">{</span>
  No <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
  Yes <span class="token operator">=</span> <span class="token string">&quot;YES&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常情况下很少会使用异构枚举</p><p>现在一个枚举的案例如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 编译前</span>
<span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
  Up<span class="token punctuation">,</span>
  Down<span class="token punctuation">,</span>
  Left<span class="token punctuation">,</span>
  Right
<span class="token punctuation">}</span>

<span class="token comment">// 编译后</span>
<span class="token keyword">var</span> Direction<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>Direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Direction<span class="token punctuation">[</span>Direction<span class="token punctuation">[</span><span class="token string">&quot;Up&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Up&quot;</span><span class="token punctuation">;</span>
  Direction<span class="token punctuation">[</span>Direction<span class="token punctuation">[</span><span class="token string">&quot;Down&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Down&quot;</span><span class="token punctuation">;</span>
  Direction<span class="token punctuation">[</span>Direction<span class="token punctuation">[</span><span class="token string">&quot;Left&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Left&quot;</span><span class="token punctuation">;</span>
  Direction<span class="token punctuation">[</span>Direction<span class="token punctuation">[</span><span class="token string">&quot;Right&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Right&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Direction <span class="token operator">||</span> <span class="token punctuation">(</span>Direction <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码可以看到， Direction[Direction[&quot;Up&quot;] = 0] = &quot;Up&quot;可以分成</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>Direction<span class="token punctuation">[</span><span class="token string">&quot;Up&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
Direction<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Up&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以定义枚举类型后，可以通过 <strong>正反映射</strong> 拿到对应的值，如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
  Up<span class="token punctuation">,</span>
  Down<span class="token punctuation">,</span>
  Left<span class="token punctuation">,</span>
  Right
<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">.</span>Up <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Direction<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Up</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且 多处定义 的 枚举 是可以进行 <strong>合并</strong> 操作</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 编译前</span>
<span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
    Up <span class="token operator">=</span> <span class="token string">&#39;Up&#39;</span><span class="token punctuation">,</span>
    Down <span class="token operator">=</span> <span class="token string">&#39;Down&#39;</span><span class="token punctuation">,</span>
    Left <span class="token operator">=</span> <span class="token string">&#39;Left&#39;</span><span class="token punctuation">,</span>
    Right <span class="token operator">=</span> <span class="token string">&#39;Right&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>
    Center <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token comment">// 编译后</span>
<span class="token keyword">var</span> Direction<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>Direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Direction<span class="token punctuation">[</span><span class="token string">&quot;Up&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Up&quot;</span><span class="token punctuation">;</span>
  Direction<span class="token punctuation">[</span><span class="token string">&quot;Down&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Down&quot;</span><span class="token punctuation">;</span>
  Direction<span class="token punctuation">[</span><span class="token string">&quot;Left&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Left&quot;</span><span class="token punctuation">;</span>
  Direction<span class="token punctuation">[</span><span class="token string">&quot;Right&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Right&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Direction <span class="token operator">||</span> <span class="token punctuation">(</span>Direction <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>Direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Direction<span class="token punctuation">[</span>Direction<span class="token punctuation">[</span><span class="token string">&quot;Center&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Center&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Direction <span class="token operator">||</span> <span class="token punctuation">(</span>Direction <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1"><span>应用场景</span></a></h3><p>就拿回生活的例子，后端返回的字段使用 <strong>0 - 6</strong> 标记对应的日期，这时候就可以使用枚举可提高代码可读性</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>Sun<span class="token punctuation">,</span> Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat<span class="token punctuation">}</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">&quot;Sun&quot;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">&quot;Mon&quot;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">&quot;Tue&quot;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">&quot;Sat&quot;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,128),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/Promotion/JavaScript/TypeScript/","title":"TypeScript","lang":"zh-CN","frontmatter":{"title":"TypeScript","lang":"zh-CN","date":"2024-04-15T14:15:31.000Z","permalink":"/Promotion/JavaScript/TypeScript/","category":["TypeScript"],"tag":["TypeScript"],"description":"TS中的类 类（Class） 是 面向对象 程序设计 （OOP，Object-Oriented Programming） 实现信息封装的基础 类是一种用户定义的 引用数据 类型，也称类类型 传统的 面向对象语言 基本都是基于类的，JavaScript 基于 原型 的方式让开发者多了很多理解成本 在 ES6 之后，JavaScript 拥有了 class...","head":[["meta",{"property":"og:url","content":"https://shaohui-jin.github.io/Promotion/JavaScript/TypeScript/"}],["meta",{"property":"og:title","content":"TypeScript"}],["meta",{"property":"og:description","content":"TS中的类 类（Class） 是 面向对象 程序设计 （OOP，Object-Oriented Programming） 实现信息封装的基础 类是一种用户定义的 引用数据 类型，也称类类型 传统的 面向对象语言 基本都是基于类的，JavaScript 基于 原型 的方式让开发者多了很多理解成本 在 ES6 之后，JavaScript 拥有了 class..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-17T09:45:20.000Z"}],["meta",{"property":"article:author","content":"石怜安"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:published_time","content":"2024-04-15T14:15:31.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-17T09:45:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-15T14:15:31.000Z\\",\\"dateModified\\":\\"2025-04-17T09:45:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"石怜安\\",\\"url\\":\\"https://shaohui-jin.github.io\\"}]}"]]},"headers":[{"level":2,"title":"TS中的类","slug":"ts中的类","link":"#ts中的类","children":[{"level":3,"title":"用法","slug":"用法","link":"#用法","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"修饰符","slug":"修饰符","link":"#修饰符","children":[{"level":4,"title":"公共修饰符 public","slug":"公共修饰符-public","link":"#公共修饰符-public","children":[]},{"level":4,"title":"私有修饰符 private","slug":"私有修饰符-private","link":"#私有修饰符-private","children":[]},{"level":4,"title":"受保护修饰符 protect","slug":"受保护修饰符-protect","link":"#受保护修饰符-protect","children":[]},{"level":4,"title":"只读修饰符 readonly","slug":"只读修饰符-readonly","link":"#只读修饰符-readonly","children":[]},{"level":4,"title":"静态属性 static","slug":"静态属性-static","link":"#静态属性-static","children":[]},{"level":4,"title":"抽象类 abstract","slug":"抽象类-abstract","link":"#抽象类-abstract","children":[]}]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}]},{"level":2,"title":"typescript 的数据类型","slug":"typescript-的数据类型","link":"#typescript-的数据类型","children":[{"level":3,"title":"布尔类型 boolean","slug":"布尔类型-boolean","link":"#布尔类型-boolean","children":[]},{"level":3,"title":"数字类型 number","slug":"数字类型-number","link":"#数字类型-number","children":[]},{"level":3,"title":"字符串类型 string","slug":"字符串类型-string","link":"#字符串类型-string","children":[]},{"level":3,"title":"数组类型 array","slug":"数组类型-array","link":"#数组类型-array","children":[]},{"level":3,"title":"元祖类型 tuple","slug":"元祖类型-tuple","link":"#元祖类型-tuple","children":[]},{"level":3,"title":"枚举类型 enum","slug":"枚举类型-enum","link":"#枚举类型-enum","children":[]},{"level":3,"title":"任何类型 any","slug":"任何类型-any","link":"#任何类型-any","children":[]},{"level":3,"title":"null 和 和 undefined","slug":"null-和-和-undefined","link":"#null-和-和-undefined","children":[]},{"level":3,"title":"无返回值类型 void","slug":"无返回值类型-void","link":"#无返回值类型-void","children":[]},{"level":3,"title":"不会出现类型 never","slug":"不会出现类型-never","link":"#不会出现类型-never","children":[]},{"level":3,"title":"对象类型 object","slug":"对象类型-object","link":"#对象类型-object","children":[]},{"level":3,"title":"总而言之","slug":"总而言之","link":"#总而言之","children":[]}]},{"level":2,"title":"TS中的枚举类型","slug":"ts中的枚举类型","link":"#ts中的枚举类型","children":[{"level":3,"title":"用法","slug":"用法-1","link":"#用法-1","children":[]},{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[{"level":5,"title":"数字枚举","slug":"数字枚举","link":"#数字枚举","children":[]},{"level":5,"title":"字符串枚举","slug":"字符串枚举","link":"#字符串枚举","children":[]},{"level":5,"title":"异构枚举","slug":"异构枚举","link":"#异构枚举","children":[]}]},{"level":3,"title":"应用场景","slug":"应用场景-1","link":"#应用场景-1","children":[]}]}],"git":{"createdTime":1744883120000,"updatedTime":1744883120000,"contributors":[{"name":"shaohui_jin","email":"1051131737@qq.com","commits":1}]},"readingTime":{"minutes":10.28,"words":3083},"filePathRelative":"zh/精选文章/JavaScript/TypeScript.md","localizedDate":"2024年4月15日","excerpt":"<h2>TS中的类</h2>\\n<p><strong>类（Class）</strong> 是 <strong>面向对象</strong> 程序设计 <strong>（OOP，Object-Oriented Programming）</strong> 实现信息封装的基础</p>\\n<p>类是一种用户定义的 <strong>引用数据</strong> 类型，也称类类型</p>\\n<p>传统的 面向对象语言 基本都是基于类的，JavaScript 基于 <strong>原型</strong> 的方式让开发者多了很多理解成本</p>\\n<p>在 ES6 之后，JavaScript 拥有了 <strong>class</strong> 关键字，虽然本质依然是 <strong>构造函数</strong>，但是使用起来已经方便了许多</p>","autoDesc":true}');export{k as comp,d as data};
